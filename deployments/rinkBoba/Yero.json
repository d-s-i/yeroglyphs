{
  "address": "0x890e7E72f4630CE1E802fC05270490bCdDA174Ab",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TOKEN_LIMIT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "_name",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FOURTH_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isMintingAllowed",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BENEFICIARY",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_defaultIndex",
          "type": "uint256"
        }
      ],
      "name": "setTokenIdDefaultIndex",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "symbolScheme",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "verifyPassword",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockNumberSaved",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getSymbol",
      "outputs": [
        {
          "name": "",
          "type": "bytes5"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdDefaultIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CYBERDAO_LIMIT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "viewCurrentTokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FIFTH_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "getPasswords",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "saveTokenURI",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "THIRD_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_isMintingAllowed",
          "type": "bool"
        }
      ],
      "name": "setIsMintingAllowed",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_passwords",
          "type": "string[]"
        }
      ],
      "name": "setPasswords",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "viewSpecificTokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "seed",
          "type": "uint256"
        },
        {
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "createGlyph",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "totalBlockNumberSaved",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SECOND_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CYBERDAO",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FIRST_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "a",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Generated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "transactionHash": "0x7a44dfe06fb6743e903394a62e55b1db93bd370b9a9dd857902ecc13a5c8fdb4",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x890e7E72f4630CE1E802fC05270490bCdDA174Ab",
    "transactionIndex": 0,
    "gasUsed": "4376156",
    "logsBloom": "0x
    "blockHash": "0x54841e5fb39796c2c18d185db1ae3d756c1b5875e1b86ace13060ad9ff376a2f",
    "transactionHash": "0x7a44dfe06fb6743e903394a62e55b1db93bd370b9a9dd857902ecc13a5c8fdb4",
    "logs": [],
    "blockNumber": 4320,
    "cumulativeGasUsed": "4376156",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "9177cf0bb27d75784a08eaafc624c1b8",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.6ae8fb59\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOURTH_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isMintingAllowed\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BENEFICIARY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_defaultIndex\",\"type\":\"uint256\"}],\"name\":\"setTokenIdDefaultIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"symbolScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"verifyPassword\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockNumberSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdDefaultIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CYBERDAO_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"viewCurrentTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIFTH_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"getPasswords\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"saveTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THIRD_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_isMintingAllowed\",\"type\":\"bool\"}],\"name\":\"setIsMintingAllowed\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_passwords\",\"type\":\"string[]\"}],\"name\":\"setPasswords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"viewSpecificTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"createGlyph\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalBlockNumberSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECOND_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CYBERDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIRST_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Generated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\r\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\\r\",\"_tokenId\":\"ID of the token to be approved.\\r\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\r considered invalid, and this function throws for queries about the zero address.\\r\",\"params\":{\"_owner\":\"Address for whom to query the balance.\\r\"},\"return\":\"Balance of _owner.\\r\"},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\\r\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\\r\"},\"return\":\"Address that _tokenId is approved for.\\r\"},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\\r\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\\r\",\"_owner\":\"The address that owns the NFTs.\\r\"},\"return\":\"True if approved for all, false otherwise.\\r\"},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\\r\",\"return\":\"Representing name.\\r\"},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\r invalid, and queries about them do throw.\\r\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\\r\"},\"return\":\"Address of _tokenId owner.\\r\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can\\r be changed to payable.\\r\",\"params\":{\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can\\r be changed to payable.\\r\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\\r\",\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"saveTokenURI(uint256)\":{\"details\":\"Save the block.number inside an array.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\r `msg.sender`'s assets. It also emits the ApprovalForAll event.\\r\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\\r\",\"_operator\":\"Address to add to the set of authorized operators.\\r\"}},\"setTokenIdDefaultIndex(uint256,uint256)\":{\"details\":\"Set the default index for the tokenURI.\",\"params\":{\"_defaultIndex\":\"Index of block.number used to build the tokenURI to set as default.\",\"_tokenId\":\"Id for which we want uri.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\\r\",\"params\":{\"_interfaceID\":\"Id of the interface.\\r\"},\"return\":\"True if _interfaceID is supported, false otherwise.\\r\"},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\\r\",\"return\":\"Representing symbol.\\r\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"returns the n-th NFT ID from a list of owner's tokens.\\r\",\"params\":{\"_index\":\"Index number representing n-th token in owner's list of tokens.\\r\",\"_owner\":\"Token owner's address.\\r\"},\"return\":\"Token id.\\r\"},\"tokenURI(uint256)\":{\"details\":\"A distinct URI (RFC 3986) for a given NFT.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\r address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\r address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\r\",\"params\":{\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"viewCurrentTokenURI(uint256)\":{\"details\":\"View the current tokenURI for a given tokenId at the current block.\",\"params\":{\"_tokenId\":\"Id for which we want the current uri.\"},\"return\":\"URI of _tokenId.\"},\"viewSpecificTokenURI(uint256,uint256)\":{\"details\":\"View a specific, already saved tokenURI.\",\"params\":{\"_index\":\"Index for which we want to see the tokenURI.\",\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is\\r the current NFT owner, or an authorized operator of the current owner.\\r\"},\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\\r\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this\\r function just sets data to \\\"\\\"\\r\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the\\r approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\r the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\r function checks if `_to` is a smart contract (code size > 0). If so, it calls\\r `onERC721Received` on `_to` and throws if the return value is not\\r `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\r\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\\r\"},\"totalSupply()\":{\"notice\":\"/ Enumerable\\r\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\r they maybe be permanently lost.\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Yero.sol\":\"Yero\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC721.sol\":{\"content\":\"// SPDX-Licenser-Identifier: MIT\\r\\npragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./interfaces/ERC721TokenReceiver.sol\\\";\\r\\n\\r\\ncontract ERC721 {\\r\\n    \\r\\n    event Generated(uint indexed index, address indexed a, uint256 value);\\r\\n\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from owner address to mapping of operator addresses.\\r\\n     */\\r\\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from NFT ID to approved address.\\r\\n     */\\r\\n    mapping (uint256 => address) internal idToApproval;\\r\\n\\r\\n    /**\\r\\n     * @dev A mapping from NFT ID to the address that owns it.\\r\\n     */\\r\\n    mapping (uint256 => address) internal idToOwner;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from NFT ID to its index in the owner tokens list.\\r\\n     */\\r\\n    mapping(uint256 => uint256) internal idToOwnerIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from owner to list of owned NFT IDs.\\r\\n     */\\r\\n    mapping(address => uint256[]) internal ownerToIds;\\r\\n\\r\\n    // ERC 165\\r\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens.\\r\\n     */\\r\\n    uint internal numTokens = 0;\\r\\n\\r\\n    string internal nftName = \\\"Yero\\\";\\r\\n    string internal nftSymbol = \\\"\\u1d79\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Contract constructor.\\r\\n     */\\r\\n    constructor() public {\\r\\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\\r\\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\\r\\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\\r\\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\\r\\n     * @param _tokenId ID of the NFT to validate.\\r\\n     */\\r\\n    modifier canOperate(uint256 _tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Guarantees that the msg.sender is allowed to transfer NFT.\\r\\n     * @param _tokenId ID of the NFT to transfer.\\r\\n     */\\r\\n    modifier canTransfer(uint256 _tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(\\r\\n            tokenOwner == msg.sender\\r\\n            || idToApproval[_tokenId] == msg.sender\\r\\n            || ownerToOperators[tokenOwner][msg.sender]\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Guarantees that _tokenId is a valid Token.\\r\\n     * @param _tokenId ID of the NFT to validate.\\r\\n     */\\r\\n    modifier validNFToken(uint256 _tokenId) {\\r\\n        require(idToOwner[_tokenId] != address(0), \\\"Query for non-existant token\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if `_operator` is an approved operator for `_owner`.\\r\\n     * @param _owner The address that owns the NFTs.\\r\\n     * @param _operator The address that acts on behalf of the owner.\\r\\n     * @return True if approved for all, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\\r\\n        return ownerToOperators[_owner][_operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\r\\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\\r\\n     * @notice This works even if sender doesn't own any tokens at the time.\\r\\n     * @param _operator Address to add to the set of authorized operators.\\r\\n     * @param _approved True if the operators is approved, false to revoke approval.\\r\\n     */\\r\\n    function setApprovalForAll(address _operator, bool _approved) external {\\r\\n        ownerToOperators[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n    \\r\\n      //////////////////////////\\r\\n     //// ERC 721 and 165  ////\\r\\n    //////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check which interfaces are suported by this contract.\\r\\n     * @param _interfaceID Id of the interface.\\r\\n     * @return True if _interfaceID is supported, false otherwise.\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\\r\\n        return supportedInterfaces[_interfaceID];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the target address is a contract.\\r\\n     * @param _addr Address to check.\\r\\n     * @return True if _addr is a contract, false if not.\\r\\n     */\\r\\n    function isContract(address _addr) internal view returns (bool addressCheck) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(_addr) } // solhint-disable-line\\r\\n        addressCheck = size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\r\\n     * be changed to payable.\\r\\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\r\\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\r\\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\r\\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n     * `onERC721Received` on `_to` and throws if the return value is not\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\\r\\n        _safeTransferFrom(_from, _to, _tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\r\\n     * be changed to payable.\\r\\n     * @notice This works identically to the other function with an extra data parameter, except this\\r\\n     * function just sets data to \\\"\\\"\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\\r\\n        _safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\r\\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\r\\n     * address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\r\\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\r\\n     * they maybe be permanently lost.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == _from);\\r\\n        require(_to != address(0));\\r\\n        _transfer(_to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\r\\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\r\\n     * the current NFT owner, or an authorized operator of the current owner.\\r\\n     * @param _approved Address to be approved for the given NFT ID.\\r\\n     * @param _tokenId ID of the token to be approved.\\r\\n     */\\r\\n    function approve(address _approved, uint256 _tokenId) external canOperate(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(_approved != tokenOwner);\\r\\n        idToApproval[_tokenId] = _approved;\\r\\n        emit Approval(tokenOwner, _approved, _tokenId);\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Actually perform the safeTransferFrom.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\r\\n     */\\r\\n    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == _from);\\r\\n        require(_to != address(0));\\r\\n\\r\\n        _transfer(_to, _tokenId);\\r\\n\\r\\n        if (isContract(_to)) {\\r\\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\\r\\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Actually preforms the transfer.\\r\\n     * @notice Does NO checks.\\r\\n     * @param _to Address of a new owner.\\r\\n     * @param _tokenId The NFT that is being transferred.\\r\\n     */\\r\\n    function _transfer(address _to, uint256 _tokenId) internal {\\r\\n        address from = idToOwner[_tokenId];\\r\\n        _clearApproval(_tokenId);\\r\\n\\r\\n        _removeNFToken(from, _tokenId);\\r\\n        _addNFToken(_to, _tokenId);\\r\\n\\r\\n        emit Transfer(from, _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Assigns a new NFT to an address.\\r\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\r\\n     * @param _to Address to which we want to add the NFT.\\r\\n     * @param _tokenId Which NFT we want to add.\\r\\n     */\\r\\n    function _addNFToken(address _to, uint256 _tokenId) internal {\\r\\n        require(idToOwner[_tokenId] == address(0));\\r\\n        idToOwner[_tokenId] = _to;\\r\\n\\r\\n        uint256 length = ownerToIds[_to].push(_tokenId);\\r\\n        idToOwnerIndex[_tokenId] = length - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a NFT from an address.\\r\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\r\\n     * @param _from Address from wich we want to remove the NFT.\\r\\n     * @param _tokenId Which NFT we want to remove.\\r\\n     */\\r\\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\\r\\n        require(idToOwner[_tokenId] == _from);\\r\\n        delete idToOwner[_tokenId];\\r\\n\\r\\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\\r\\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\\r\\n\\r\\n        if (lastTokenIndex != tokenToRemoveIndex) {\\r\\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\\r\\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\\r\\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\\r\\n        }\\r\\n\\r\\n        ownerToIds[_from].length--;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Clears the current approval of a given NFT ID.\\r\\n     * @param _tokenId ID of the NFT to be transferred.\\r\\n     */\\r\\n    function _clearApproval(uint256 _tokenId) private {\\r\\n        if (idToApproval[_tokenId] != address(0)) {\\r\\n            delete idToApproval[_tokenId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the approved address for a single NFT.\\r\\n     * @notice Throws if `_tokenId` is not a valid NFT.\\r\\n     * @param _tokenId ID of the NFT to query the approval of.\\r\\n     * @return Address that _tokenId is approved for.\\r\\n     */\\r\\n    function getApproved(uint256 _tokenId) external view validNFToken(_tokenId) returns (address) {\\r\\n        return idToApproval[_tokenId];\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\r\\n     * extension to remove double storage (gas optimization) of owner nft count.\\r\\n     * @param _owner Address for whom to query the count.\\r\\n     * @return Number of _owner NFTs.\\r\\n     */\\r\\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\\r\\n        return ownerToIds[_owner].length;\\r\\n    }\\r\\n\\r\\n    //// Enumerable\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return numTokens;\\r\\n    }\\r\\n\\r\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\r\\n        require(index < numTokens);\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns the n-th NFT ID from a list of owner's tokens.\\r\\n     * @param _owner Token owner's address.\\r\\n     * @param _index Index number representing n-th token in owner's list of tokens.\\r\\n     * @return Token id.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\\r\\n        require(_index < ownerToIds[_owner].length);\\r\\n        return ownerToIds[_owner][_index];\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\r\\n     * considered invalid, and this function throws for queries about the zero address.\\r\\n     * @param _owner Address for whom to query the balance.\\r\\n     * @return Balance of _owner.\\r\\n     */\\r\\n    function balanceOf(address _owner) external view returns (uint256) {\\r\\n        require(_owner != address(0));\\r\\n        return _getOwnerNFTCount(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\r\\n     * invalid, and queries about them do throw.\\r\\n     * @param _tokenId The identifier for an NFT.\\r\\n     * @return Address of _tokenId owner.\\r\\n     */\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\\r\\n        _owner = idToOwner[_tokenId];\\r\\n        require(_owner != address(0));\\r\\n    }\\r\\n    \\r\\n    //// Metadata\\r\\n\\r\\n    /**\\r\\n      * @dev Returns a descriptive name for a collection of NFTokens.\\r\\n      * @return Representing name.\\r\\n      */\\r\\n    function name() external view returns (string memory _name) {\\r\\n        _name = nftName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an abbreviated name for NFTokens.\\r\\n     * @return Representing symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory _symbol) {\\r\\n        _symbol = nftSymbol;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3eec93528af7377ea9ba03d4b7d7c9a7f29e3cb87f1de263ee776603d80e97f6\"},\"contracts/Yero.sol\":{\"content\":\"pragma solidity ^0.4.24;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n *\\n *  ;.  ;.                           \\n *  ; | ; |          ||          .-.  \\n *  `.| `.| ....     ||  .---.  _|_ \\\\ \\n *  |   | `=.`''===.' '.___.' (_)  \\n *\\n * The following algorithm is amazing, and I would like to thank Matt Hall and John Watkinson for their astounding work\\n * The algorithm have been made for Autoglyphs and have been changed by dsi for Yero\\n *\\n * MODIFICATIONS\\n * Split the contract into multiple part like MainContract, ERC721 and ERC721Receiver.\\n * Add a dynamic variable `block.number` inside the `draw` function to make it more dynamic\\n * Split the `draw` function into two functions with `getSymbol` and add a struct to avoid Error: Stack Too Deep.\\n * Doesn't execute the `draw` function on minting and instead save the seed and the block.number to execute it on a view function (`tokenURI`)\\n * Add `saveTokenURI` to save block.number into an array linked to the tokenId\\n * Add `setTokenIdDefaultIndex` to change the default returned URI from the `tokenURI` function\\n * Add `viewCurrentTokenURI` to view the tokenURI at the current block\\n * Add `viewSpecificTokenURI` to view already saved tokenURI\\n *\\n *\\n * FUNCTIONNING\\n * The output of the 'tokenURI' function is a set of instructions to make a drawing.\\n * Each symbol in the output corresponds to a cell, and there are 64x64 cells arranged in a square grid.\\n * The drawing can be any size, and the pen's stroke width should be between 1/5th to 1/10th the size of a cell.\\n * The drawing instructions for the nine different symbols are as follows:\\n *\\n *   .  Draw nothing in the cell.\\n *   O  Draw a circle bounded by the cell.\\n *   +  Draw centered lines vertically and horizontally the length of the cell.\\n *   X  Draw diagonal lines connecting opposite corners of the cell.\\n *   |  Draw a centered vertical line the length of the cell.\\n *   -  Draw a centered horizontal line the length of the cell.\\n *   \\\\  Draw a line connecting the top left corner of the cell to the bottom right corner.\\n *   /  Draw a line connecting the bottom left corner of teh cell to the top right corner.\\n *   #  Fill in the cell completely.\\n *\\n */\\n\\nimport { ERC721 } from \\\"./ERC721.sol\\\";\\n\\ncontract Yero is ERC721 {\\n\\n    bool public isMintingAllowed;\\n\\n    uint public constant TOKEN_LIMIT = 512; // 8 for testing, 256 or 512 for prod;\\n    uint public constant CYBERDAO_LIMIT = 15;\\n\\n    uint public constant FIRST_PRICE = 60606000000000000 wei; // 0.060606 ether\\n    uint public constant SECOND_PRICE = 90909000000000000 wei; // 0.090909 ether\\n    uint public constant THIRD_PRICE = 101010100000000000 wei; // 0.1010101 ether\\n    uint public constant FOURTH_PRICE = 121212100000000000 wei; // 0.1212121 ether\\n    uint public constant FIFTH_PRICE = 131313130000000000 wei; // 0.1313131 ether\\n\\n    // The beneficiary is 350.org\\n    address public constant BENEFICIARY = 0x0800b5479E4E47E7caeD7c5e9B74Ec44d3F0606a;\\n    address public constant CYBERDAO = 0x945A8480d61D85ED755013169dC165574d751D1a;\\n\\n    string internal constant TABLE_ENCODE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    mapping (uint => address) private idToCreator;\\n    mapping (uint => uint8) private idToSymbolScheme;\\n\\n    /**\\n     * @dev A mapping from NFT ID to the seed used to make it.\\n     */\\n    mapping (uint256 => uint256) internal idToSeed;\\n    mapping (uint256 => uint256) internal seedToId;\\n    mapping (uint256 => bool) internal isGenesis;\\n\\n    mapping (uint256 => uint256) public tokenIdDefaultIndex;\\n    mapping (uint256 => uint256[]) public blockNumberSaved;\\n\\n    mapping (string => bool) private passwords;\\n\\n    function getPasswords(string _password) public view returns(bool) {\\n        return passwords[_password];\\n    }\\n    mapping (string => bool) internal isPassFound;\\n\\n    address public owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n        isMintingAllowed = false;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender is not the Owner\\\");\\n        _;\\n    }\\n\\n    modifier mintingAllowed() {\\n        require(isMintingAllowed, \\\"Minting not allowed\\\");\\n        _;\\n    }\\n\\n    ///////////////////\\n    //// GENERATOR ////\\n    ///////////////////\\n\\n    int constant ONE = int(0x100000000);\\n    uint constant USIZE = 64;\\n    int constant SIZE = int(USIZE);\\n    int constant HALF_SIZE = SIZE / int(2);\\n\\n    int constant SCALE = int(0x1b81a81ab1a81a823);\\n    int constant HALF_SCALE = SCALE / int(2);\\n\\n    bytes prefix = \\\"data:text/plain;charset=utf-8,\\\";\\n\\n    // 0x2E = .\\n    // 0x4F = O\\n    // 0x2B = +\\n    // 0x58 = X\\n    // 0x7C = |\\n    // 0x2D = -\\n    // 0x5C = \\\\\\n    // 0x2F = /\\n    // 0x23 = #\\n\\n    function abs(int n) internal pure returns (int) {\\n        if (n >= 0) return n;\\n        return -n;\\n    }\\n\\n    function getScheme(uint a) internal pure returns (uint8) {\\n        uint index = a % 83;\\n        uint8 scheme;\\n        if (index < 20) {\\n            scheme = 1;\\n        } else if (index < 35) {\\n            scheme = 2;\\n        } else if (index < 48) {\\n            scheme = 3;\\n        } else if (index < 59) {\\n            scheme = 4;\\n        } else if (index < 68) {\\n            scheme = 5;\\n        } else if (index < 73) {\\n            scheme = 6;\\n        } else if (index < 77) {\\n            scheme = 7;\\n        } else if (index < 80) {\\n            scheme = 8;\\n        } else if (index < 82) {\\n            scheme = 9;\\n        } else {\\n            scheme = 10;\\n        }\\n        return scheme;\\n    }\\n\\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\\n\\n    // The following code generates art.\\n\\n    struct DrawingValues {\\n\\n        uint value;\\n        uint mod;\\n        bytes5 symbols;\\n    }\\n\\n    function draw(uint _id, uint _seed, uint _blockNumber) internal view returns (string) {\\n        uint a = uint(uint160(keccak256(abi.encodePacked(_seed, _blockNumber))));\\n        bytes memory output = new bytes(USIZE * (USIZE + 3) + 30);\\n        uint c;\\n        for (c = 0; c < 30; c++) {\\n            output[c] = prefix[c];\\n        }\\n\\n        DrawingValues memory drawingValues;\\n\\n        int x = 0;\\n        int y = 0;\\n        uint v = 0;\\n        drawingValues.value = 0;\\n        drawingValues.mod = (a % 11) + 5;\\n        drawingValues.symbols = getSymbol(_id);\\n\\n        for (int i = int(0); i < SIZE; i++) {\\n            y = (2 * (i - HALF_SIZE) + 1);\\n            if (a % 3 == 1) {\\n                y = -y;\\n            } else if (a % 3 == 2) {\\n                y = abs(y);\\n            }\\n            y = y * int(a);\\n            for (int j = int(0); j < SIZE; j++) {\\n                x = (2 * (j - HALF_SIZE) + 1);\\n                if (a % 2 == 1) {\\n                    x = abs(x);\\n                }\\n                x = x * int(a);\\n                v = uint(x * y / ONE) % drawingValues.mod;\\n                if (v < 5) {\\n                    drawingValues.value = uint(drawingValues.symbols[v]);\\n                } else {\\n                    drawingValues.value = 0x2E;\\n                }\\n                output[c] = byte(bytes32(drawingValues.value << 248));\\n                c++;\\n            }\\n            output[c] = byte(0x25);\\n            c++;\\n            output[c] = byte(0x30);\\n            c++;\\n            output[c] = byte(0x41);\\n            c++;\\n        }\\n        string memory result = string(output);\\n        return result;\\n    }\\n\\n    function getSymbol(uint id) public view returns (bytes5) {\\n        bytes5 symbols;\\n        uint8 symbolScheme = idToSymbolScheme[id];\\n\\n        if (symbolScheme == 0) {\\n            revert();\\n        } else if (symbolScheme == 1) {\\n            symbols = 0x2E582F5C2E; // X/\\\\\\n        } else if (symbolScheme == 2) {\\n            symbols = 0x2E2B2D7C2E; // +-|\\n        } else if (symbolScheme == 3) {\\n            symbols = 0x2E2F5C2E2E; // /\\\\\\n        } else if (symbolScheme == 4) {\\n            symbols = 0x2E5C7C2D2F; // \\\\|-/\\n        } else if (symbolScheme == 5) {\\n            symbols = 0x2E4F7C2D2E; // O|-\\n        } else if (symbolScheme == 6) {\\n            symbols = 0x2E5C5C2E2E; // \\\\\\n        } else if (symbolScheme == 7) {\\n            symbols = 0x2E237C2D2B; // #|-+\\n        } else if (symbolScheme == 8) {\\n            symbols = 0x2E4F4F2E2E; // OO\\n        } else if (symbolScheme == 9) {\\n            symbols = 0x2E232E2E2E; // #\\n        } else {\\n            symbols = 0x2E234F2E2E; // #O\\n        }\\n\\n        return symbols;\\n    }\\n\\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\\n\\n    function creator(uint _id) external view returns (address) {\\n        return idToCreator[_id];\\n    }\\n\\n    function symbolScheme(uint _id) external view returns (uint8) {\\n        return idToSymbolScheme[_id];\\n    }\\n\\n    function createGlyph(uint seed, string _password) external payable mintingAllowed returns (uint256) {\\n        require(numTokens < TOKEN_LIMIT, \\\"All token Minted\\\");\\n        if(numTokens < 15) {\\n            require(msg.sender == CYBERDAO, \\\"Only cyberDAO can mint\\\");\\n        } else if(numTokens < 30) {\\n            require(msg.value >= FIRST_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens < 80) {\\n            require(msg.value >= SECOND_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens < 432) {\\n            require(msg.value >= THIRD_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens < 482) {\\n            require(msg.value >= FOURTH_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens <= 512) {\\n            require(msg.value >= FIFTH_PRICE, \\\"Payement too low\\\");\\n        }\\n        return _mint(msg.sender, seed, _password);\\n    }\\n\\n    // function createGlyphForCyber(uint seed, string _password) external payable mintingAllowed returns (uint256) {\\n    //     require(numTokens < TOKEN_LIMIT, \\\"All token Minted\\\");\\n    //     require(msg.sender == CYBERDAO, \\\"Only cyberDAO can mint\\\");\\n    //     return _mint(msg.sender, seed, _password);\\n    // }\\n\\n    /**\\n     * @dev Mints a new NFT.\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * mint function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation.\\n     * @param _to The address that will own the minted NFT.\\n     */\\n    function _mint(address _to, uint seed, string memory _password) internal returns (uint256) {\\n        require(_to != address(0));\\n        require(seedToId[seed] == 0, \\\"Token already minted\\\");\\n        uint id = numTokens + 1;\\n\\n        idToCreator[id] = _to;\\n        idToSeed[id] = seed;\\n        seedToId[seed] = id;\\n        if(verifyPassword(_password)) {\\n            isGenesis[id] = true;\\n        }\\n        uint a = uint(uint160(keccak256(abi.encodePacked(seed))));\\n        idToSymbolScheme[id] = getScheme(a);\\n        blockNumberSaved[id].push(block.number);\\n        tokenIdDefaultIndex[id] = 0;\\n        emit Generated(id, _to, block.number);\\n\\n        numTokens = numTokens + 1;\\n        _addNFToken(_to, id);\\n\\n        BENEFICIARY.transfer(msg.value);\\n\\n        emit Transfer(address(0), _to, id);\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev A distinct URI (RFC 3986) for a given NFT.\\n     * @param _tokenId Id for which we want uri.\\n     * @return URI of _tokenId.\\n     */\\n    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\\n        uint256 _defaultIndex = tokenIdDefaultIndex[_tokenId]; \\n        uint256 _defaultBlockNumber = blockNumberSaved[_tokenId][_defaultIndex];\\n        uint256 _seed = idToSeed[_tokenId];\\n        string memory imageURI = draw(_tokenId, _seed, _defaultBlockNumber);\\n        string memory genesis = isGenesis[_tokenId] ? \\\"true\\\" : \\\"false\\\";\\n        string memory json = encode(bytes(abi.encodePacked(\\n            '{\\\"name\\\": \\\"Yero\\\", ', \\n            '\\\"description\\\": \\\"Dynamic Generative Art\\\",', \\n            '\\\"attributes\\\": [{',\\n            '\\\"isGenesis\\\": \\\"',\\n            genesis,\\n            '\\\"}], \\\"image\\\": \\\"',\\n            imageURI,\\n            '\\\"}'\\n        )));\\n        string memory data = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n        return data;\\n    }\\n\\n    /**\\n     * @dev Save the block.number inside an array.\\n     * @param _tokenId Id for which we want uri.\\n     */\\n    function saveTokenURI(uint256 _tokenId) external validNFToken(_tokenId) {\\n        require(idToCreator[_tokenId] == msg.sender, \\\"Only owner can call\\\");\\n        blockNumberSaved[_tokenId].push(block.number);\\n    }\\n\\n    /**\\n     * @dev Set the default index for the tokenURI.\\n     * @param _tokenId Id for which we want uri.\\n     * @param _defaultIndex Index of block.number used to build the tokenURI to set as default.\\n     */\\n    function setTokenIdDefaultIndex(uint256 _tokenId, uint256 _defaultIndex) external validNFToken(_tokenId) {\\n        require(idToCreator[_tokenId] == msg.sender, \\\"Only owner can call\\\");\\n\\n        tokenIdDefaultIndex[_tokenId] = _defaultIndex;\\n    }\\n\\n    /**\\n     * @dev View the current tokenURI for a given tokenId at the current block.\\n     * @param _tokenId Id for which we want the current uri.\\n     * @return URI of _tokenId.\\n     */\\n    function viewCurrentTokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\\n        uint256 _seed = idToSeed[_tokenId];\\n        return(draw(_tokenId, _seed, block.number));\\n    }\\n\\n    /**\\n     * @dev View a specific, already saved tokenURI.\\n     * @param _tokenId Id for which we want uri.\\n     * @param _index Index for which we want to see the tokenURI.\\n     * @return URI of _tokenId.\\n     */\\n    function viewSpecificTokenURI(uint256 _tokenId, uint256 _index) external view returns (string memory) {\\n        uint256 _seed = idToSeed[_tokenId];\\n        return(draw(_tokenId, _seed, blockNumberSaved[_tokenId][_index]));\\n    }\\n\\n    function totalBlockNumberSaved(uint256 _tokenId) external view returns(uint256) {\\n        return(blockNumberSaved[_tokenId].length);\\n    }\\n\\n    function setPasswords(string[] memory _passwords) public onlyOwner {\\n        for(uint i = 0; i < _passwords.length; i++) {\\n            passwords[_passwords[i]] = true;\\n        }\\n    }\\n\\n    function verifyPassword(string memory _password) public returns(bool) {\\n        if(passwords[_password] && !isPassFound[_password]) {\\n            isPassFound[_password] = true;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function setIsMintingAllowed(bool _isMintingAllowed) public onlyOwner {\\n        isMintingAllowed = _isMintingAllowed;\\n    }\\n\\n}\",\"keccak256\":\"0x793a9547214f563259ba84ac53a05b11d56b16f3e359b945bbfd5a0f19b7bd3d\"},\"contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ninterface ERC721TokenReceiver\\r\\n{\\r\\n\\r\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\\r\\n\\r\\n}\",\"keccak256\":\"0xd89cf26554c6a36379c8bfe368118b92a0c43d31c3640b1e46da78682cf3617b\"}},\"version\":1}",
  "bytecode": "0x608060405260006006556040805190810160405280600481526020017f5965726f0000000000000000000000000000000000000000000000000000000081525060079080519060200190620000569291906200031b565b506040805190810160405280600381526020017fe1b5b9000000000000000000000000000000000000000000000000000000000081525060089080519060200190620000a49291906200031b565b506040805190810160405280601e81526020017f646174613a746578742f706c61696e3b636861727365743d7574662d382c000081525060149080519060200190620000f2929190620003a2565b503480156200010057600080fd5b506001600560006301ffc9a77c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560006380ac58cd7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600063780e9d637c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000635b5e139f7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555033601360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600960006101000a81548160ff02191690831515021790555062000451565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200035e57805160ff19168380011785556200038f565b828001600101855582156200038f579182015b828111156200038e57825182559160200191906001019062000371565b5b5090506200039e919062000429565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620003e557805160ff191683800117855562000416565b8280016001018555821562000416579182015b8281111562000415578251825591602001919060010190620003f8565b5b50905062000425919062000429565b5090565b6200044e91905b808211156200044a57600081600090555060010162000430565b5090565b90565b614afb80620004616000396000f300608060405260043610610204576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a714610209578063031bd4c41461024657806306fdde0314610271578063081812fc1461029c5780630838c22b146102d9578063095ea7b31461030457806318160ddd1461032d57806323b872dd146103585780632b481883146103815780632f745c59146103ac5780632f99c6cc146103e9578063309627af14610414578063397490641461043d57806342842e0e1461047a57806343589db8146104a35780634f6ccce7146104e0578063510b51581461051d578063613496ac1461055a5780636352211e146105975780636418413c146105d457806367242bb1146106115780636d5fd46b1461064e57806370a082311461067957806375020395146106b65780638da5cb5b146106f357806394e2021f1461071e57806395d89b411461074957806398f9c7c514610774578063a22cb465146107b1578063b4ad6962146107da578063b88d4fde14610803578063c87b56dd1461082c578063c951c9f914610869578063c9bf028b14610894578063d5d6ecda146108bd578063d5d922d8146108e6578063de7fe7e114610923578063e6239fac14610953578063e6a8375714610990578063e985e9c5146109bb578063f16bd0ad146109f8578063fac68e9314610a23575b600080fd5b34801561021557600080fd5b50610230600480360361022b9190810190614326565b610a4e565b60405161023d919061474c565b60405180910390f35b34801561025257600080fd5b5061025b610ab6565b60405161026891906148a4565b60405180910390f35b34801561027d57600080fd5b50610286610abc565b6040516102939190614782565b60405180910390f35b3480156102a857600080fd5b506102c360048036036102be91908101906143b9565b610b5e565b6040516102d091906146e5565b60405180910390f35b3480156102e557600080fd5b506102ee610c42565b6040516102fb91906148a4565b60405180910390f35b34801561031057600080fd5b5061032b60048036036103269190810190614280565b610c4e565b005b34801561033957600080fd5b50610342610f1f565b60405161034f91906148a4565b60405180910390f35b34801561036457600080fd5b5061037f600480360361037a9190810190614175565b610f29565b005b34801561038d57600080fd5b506103966111fc565b6040516103a3919061474c565b60405180910390f35b3480156103b857600080fd5b506103d360048036036103ce9190810190614280565b61120f565b6040516103e091906148a4565b60405180910390f35b3480156103f557600080fd5b506103fe6112c0565b60405161040b91906146e5565b60405180910390f35b34801561042057600080fd5b5061043b6004803603610436919081019061443a565b6112d8565b005b34801561044957600080fd5b50610464600480360361045f91908101906143b9565b61143e565b60405161047191906148bf565b60405180910390f35b34801561048657600080fd5b506104a1600480360361049c9190810190614175565b611468565b005b3480156104af57600080fd5b506104ca60048036036104c59190810190614378565b611489565b6040516104d7919061474c565b60405180910390f35b3480156104ec57600080fd5b50610507600480360361050291908101906143b9565b611622565b60405161051491906148a4565b60405180910390f35b34801561052957600080fd5b50610544600480360361053f91908101906143b9565b61163c565b60405161055191906146e5565b60405180910390f35b34801561056657600080fd5b50610581600480360361057c919081019061443a565b611679565b60405161058e91906148a4565b60405180910390f35b3480156105a357600080fd5b506105be60048036036105b991908101906143b9565b6116a9565b6040516105cb91906146e5565b60405180910390f35b3480156105e057600080fd5b506105fb60048036036105f691908101906143b9565b611722565b6040516106089190614767565b60405180910390f35b34801561061d57600080fd5b50610638600480360361063391908101906143b9565b611983565b60405161064591906148a4565b60405180910390f35b34801561065a57600080fd5b5061066361199b565b60405161067091906148a4565b60405180910390f35b34801561068557600080fd5b506106a0600480360361069b9190810190614110565b6119a0565b6040516106ad91906148a4565b60405180910390f35b3480156106c257600080fd5b506106dd60048036036106d891908101906143b9565b6119ed565b6040516106ea9190614782565b60405180910390f35b3480156106ff57600080fd5b50610708611ac1565b60405161071591906146e5565b60405180910390f35b34801561072a57600080fd5b50610733611ae7565b60405161074091906148a4565b60405180910390f35b34801561075557600080fd5b5061075e611af3565b60405161076b9190614782565b60405180910390f35b34801561078057600080fd5b5061079b60048036036107969190810190614378565b611b95565b6040516107a8919061474c565b60405180910390f35b3480156107bd57600080fd5b506107d860048036036107d39190810190614244565b611c17565b005b3480156107e657600080fd5b5061080160048036036107fc91908101906143b9565b611d13565b005b34801561080f57600080fd5b5061082a600480360361082591908101906141c4565b611e9d565b005b34801561083857600080fd5b50610853600480360361084e91908101906143b9565b611ee2565b6040516108609190614782565b60405180910390f35b34801561087557600080fd5b5061087e61231d565b60405161088b91906148a4565b60405180910390f35b3480156108a057600080fd5b506108bb60048036036108b691908101906142fd565b612329565b005b3480156108c957600080fd5b506108e460048036036108df91908101906142bc565b6123d8565b005b3480156108f257600080fd5b5061090d6004803603610908919081019061443a565b612526565b60405161091a9190614782565b60405180910390f35b61093d600480360361093891908101906143e2565b61257e565b60405161094a91906148a4565b60405180910390f35b34801561095f57600080fd5b5061097a600480360361097591908101906143b9565b6128c8565b60405161098791906148a4565b60405180910390f35b34801561099c57600080fd5b506109a56128e8565b6040516109b291906148a4565b60405180910390f35b3480156109c757600080fd5b506109e260048036036109dd9190810190614139565b6128f4565b6040516109ef919061474c565b60405180910390f35b348015610a0457600080fd5b50610a0d612987565b604051610a1a91906146e5565b60405180910390f35b348015610a2f57600080fd5b50610a3861299f565b604051610a4591906148a4565b60405180910390f35b600060056000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b61020081565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b545780601f10610b2957610100808354040283529160200191610b54565b820191906000526020600020905b815481529060010190602001808311610b3757829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfd90614804565b60405180910390fd5b6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6701aea1c342faa80081565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610d4857506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610d5357600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610df9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df090614804565b60405180910390fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610e6a57600080fd5b856001600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000600654905090565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610ffc57503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8061108c57506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561109757600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113490614804565b60405180910390fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415156111ad57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156111e957600080fd5b6111f386866129aa565b50505050505050565b600960009054906101000a900460ff1681565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508210151561126157600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156112ad57fe5b9060005260206000200154905092915050565b730800b5479e4e47e7caed7c5e9b74ec44d3f0606a81565b81600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590614804565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600a600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611421576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611418906147e4565b60405180910390fd5b81600f600085815260200190815260200160002081905550505050565b6000600b600083815260200190815260200160002060009054906101000a900460ff169050919050565b6114848383836020604051908101604052806000815250612a5f565b505050565b60006011826040518082805190602001908083835b6020831015156114c3578051825260208201915060208101905060208303925061149e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16801561158657506012826040518082805190602001908083835b602083101515611543578051825260208201915060208101905060208303925061151e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16155b156116185760016012836040518082805190602001908083835b6020831015156115c557805182526020820191506020810190506020830392506115a0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055506001905061161d565b600090505b919050565b60006006548210151561163457600080fd5b819050919050565b6000600a600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60106020528160005260406000208181548110151561169457fe5b90600052602060002001600091509150505481565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561171d57600080fd5b919050565b6000806000600b600085815260200190815260200160002060009054906101000a900460ff16905060008160ff16141561175b57600080fd5b60018160ff16141561179257642e582f5c2e7b01000000000000000000000000000000000000000000000000000000029150611979565b60028160ff1614156117c957642e2b2d7c2e7b01000000000000000000000000000000000000000000000000000000029150611978565b60038160ff16141561180057642e2f5c2e2e7b01000000000000000000000000000000000000000000000000000000029150611977565b60048160ff16141561183757642e5c7c2d2f7b01000000000000000000000000000000000000000000000000000000029150611976565b60058160ff16141561186e57642e4f7c2d2e7b01000000000000000000000000000000000000000000000000000000029150611975565b60068160ff1614156118a557642e5c5c2e2e7b01000000000000000000000000000000000000000000000000000000029150611974565b60078160ff1614156118dc57642e237c2d2b7b01000000000000000000000000000000000000000000000000000000029150611973565b60088160ff16141561191357642e4f4f2e2e7b01000000000000000000000000000000000000000000000000000000029150611972565b60098160ff16141561194a57642e232e2e2e7b01000000000000000000000000000000000000000000000000000000029150611971565b642e234f2e2e7b010000000000000000000000000000000000000000000000000000000291505b5b5b5b5b5b5b5b5b8192505050919050565b600f6020528060005260406000206000915090505481565b600f81565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156119dd57600080fd5b6119e682612e62565b9050919050565b6060600082600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e90614804565b60405180910390fd5b600c6000858152602001908152602001600020549150611ab8848343612eae565b92505050919050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6701d2849893fea40081565b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b8b5780601f10611b6057610100808354040283529160200191611b8b565b820191906000526020600020905b815481529060010190602001808311611b6e57829003601f168201915b5050505050905090565b60006011826040518082805190602001908083835b602083101515611bcf5780518252602082019150602081019050602083039250611baa565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d07919061474c565b60405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db090614804565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e53906147e4565b60405180910390fd5b601060008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b611edb85858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612a5f565b5050505050565b6060600080600060608060608088600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8c90614804565b60405180910390fd5b600f60008b8152602001908152602001600020549750601060008b815260200190815260200160002088815481101515611fcb57fe5b90600052602060002001549650600c60008b8152602001908152602001600020549550611ff98a8789612eae565b9450600e60008b815260200190815260200160002060009054906101000a900460ff1661205b576040805190810160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250612092565b6040805190810160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b9350612274848660405160200180807f7b226e616d65223a20225965726f222c20000000000000000000000000000000815250601101807f226465736372697074696f6e223a202244796e616d69632047656e657261746981526020017f766520417274222c000000000000000000000000000000000000000000000000815250602801807f2261747472696275746573223a205b7b00000000000000000000000000000000815250601001807f22697347656e65736973223a2022000000000000000000000000000000000000815250600e0183805190602001908083835b6020831015156121975780518252602082019150602081019050602083039250612172565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d5d2c2022696d616765223a20220000000000000000000000000000000000815250600f0182805190602001908083835b60208310151561221257805182526020820191506020810190506020830392506121ed565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d00000000000000000000000000000000000000000000000000000000000081525060020192505050604051602081830303815290604052613408565b92508260405160200180807f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250601d0182805190602001908083835b6020831015156122d757805182526020820191506020810190506020830392506122b2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405291508198505050505050505050919050565b670166dc26993a080081565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b290614844565b60405180910390fd5b80600960006101000a81548160ff02191690831515021790555050565b6000601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561246c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246390614844565b60405180910390fd5b600090505b81518110156125225760016011838381518110151561248c57fe5b906020019060200201516040518082805190602001908083835b6020831015156124cb57805182526020820191506020810190506020830392506124a6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055508080600101915050612471565b5050565b60606000600c60008581526020019081526020016000205490506125758482601060008881526020019081526020016000208681548110151561256557fe5b9060005260206000200154612eae565b91505092915050565b6000600960009054906101000a900460ff1615156125d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c890614824565b60405180910390fd5b610200600654101515612619576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612610906147a4565b60405180910390fd5b600f60065410156126ad5773945a8480d61d85ed755013169dc165574d751d1a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f90614864565b60405180910390fd5b612882565b601e60065410156127095766d750d5fd41e0003410151515612704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fb90614884565b60405180910390fd5b612881565b6050600654101561276657670142f940fbe2d0003410151515612761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275890614884565b60405180910390fd5b612880565b6101b060065410156127c457670166dc26993a080034101515156127bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b690614884565b60405180910390fd5b61287f565b6101e26006541015612822576701aea1c342faa800341015151561281d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281490614884565b60405180910390fd5b61287e565b61020060065411151561287d576701d2849893fea400341015151561287c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287390614884565b60405180910390fd5b5b5b5b5b5b5b6128bf338585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050613591565b90509392505050565b600060106000838152602001908152602001600020805490509050919050565b670142f940fbe2d00081565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b73945a8480d61d85ed755013169dc165574d751d1a81565b66d750d5fd41e00081565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506129eb8261393e565b6129f581836139e1565b6129ff8383613c17565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000808360006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480612b3357503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80612bc357506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612bce57600080fd5b85600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6b90614804565b60405180910390fd5b6002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515612ce457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614151515612d2057600080fd5b612d2a88886129aa565b612d3388613d62565b15612e57578773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d939493929190614700565b602060405180830381600087803b158015612dad57600080fd5b505af1158015612dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612de5919081019061434f565b935063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515612e5657600080fd5b5b505050505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600060606000612ebe613e61565b600080600080600060608c8c60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612f255780518252602082019150602081019050602083039250612f00565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169950601e6003604001604002016040519080825280601f01601f191660200182016040528015612fab5781602001602082028038833980820191505090505b509850600097505b601e88101561306c576014888154600181600116156101000203166002900481101515612fdc57fe5b815460011615612ffb5790600052602060002090602091828204019190065b9054901a7f010000000000000000000000000000000000000000000000000000000000000002898981518110151561302f57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508780600101985050612fb3565b60009550600094506000935060008760000181815250506005600b8b81151561309157fe5b06018760200181815250506130a58e611722565b87604001907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600092505b60408312156133f15760016002604081151561310957fe5b058403600202019450600160038b81151561312057fe5b06141561313257846000039450613154565b600260038b81151561314057fe5b0614156131535761315085613d75565b94505b5b8985029450600091505b60408212156132a65760016002604081151561317657fe5b058303600202019550600160028b81151561318d57fe5b0614156131a05761319d86613d75565b95505b898602955086602001516401000000008688028115156131bc57fe5b058115156131c657fe5b0693506005841015613238578660400151846005811015156131e457fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004876000018181525050613244565b602e8760000181815250505b60f887600001519060020a02600102898981518110151561326157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508780600101985050818060010192505061315e565b60257f01000000000000000000000000000000000000000000000000000000000000000289898151811015156132d857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060307f010000000000000000000000000000000000000000000000000000000000000002898981518110151561334257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060417f01000000000000000000000000000000000000000000000000000000000000000289898151811015156133ac57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505082806001019350506130f1565b889050809a50505050505050505050509392505050565b606080600060606000855114156134315760206040519081016040528060008152509350613589565b606060405190810160405280604081526020017f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656681526020017f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f8152509250600360028651018115156134a057fe5b046004029150602082016040519080825280601f01601f1916602001820160405280156134dc5781602001602082028038833980820191505090505b509050818152600183018586518101602084015b8183101561354b576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253600182019150506134f0565b600389510660018114613565576002811461357557613580565b613d3d60f01b6002830352613580565b603d60f81b60018303525b50505050508093505b505050919050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156135d157600080fd5b6000600d600087815260200190815260200160002054141515613629576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613620906147c4565b60405180910390fd5b600160065401915085600a600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600c60008481526020019081526020016000208190555081600d6000878152602001908152602001600020819055506136bc84611489565b156136ee576001600e600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b84604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515613743578051825260208201915060208101905060208303925061371e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff16905061379581613d94565b600b600084815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601060008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055506000600f6000848152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff16827f85dce40a3d477c839b8a58d43ecae72c5d41bfdfcf52fc3923c5aaba3e6483f14360405161385d91906148a4565b60405180910390a360016006540160068190555061387b8683613c17565b730800b5479e4e47e7caed7c5e9b74ec44d3f0606a73ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156138d5573d6000803e3d6000fd5b50818673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a443925050509392505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156139de576001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b50565b60008060008473ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613a5357600080fd5b6002600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600360008581526020019081526020016000205492506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500391508282141515613bbd57600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515613b3c57fe5b9060005260206000200154905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515613b9657fe5b90600052602060002001819055508260036000838152602001908152602001600020819055505b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003613c0f9190613ea1565b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613c8657600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150559050600181036003600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b60008082121515613d8857819050613d8f565b8160000390505b919050565b6000806000605384811515613da557fe5b0691506014821015613dba5760019050613e57565b6023821015613dcc5760029050613e56565b6030821015613dde5760039050613e55565b603b821015613df05760049050613e54565b6044821015613e025760059050613e53565b6049821015613e145760069050613e52565b604d821015613e265760079050613e51565b6050821015613e385760089050613e50565b6052821015613e4a5760099050613e4f565b600a90505b5b5b5b5b5b5b5b5b8092505050919050565b606060405190810160405280600081526020016000815260200160007affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525090565b815481835581811115613ec857818360005260206000209182019101613ec79190613ecd565b5b505050565b613eef91905b80821115613eeb576000816000905550600101613ed3565b5090565b90565b6000613efe8235614a0c565b905092915050565b600082601f8301121515613f1957600080fd5b8135613f2c613f2782614907565b6148da565b9150818183526020840193506020810190508360005b83811015613f725781358601613f588882614050565b845260208401935060208301925050600181019050613f42565b5050505092915050565b6000613f888235614a2c565b905092915050565b6000613f9c8235614a38565b905092915050565b6000613fb08251614a38565b905092915050565b60008083601f8401121515613fcc57600080fd5b8235905067ffffffffffffffff811115613fe557600080fd5b602083019150836001820283011115613ffd57600080fd5b9250929050565b60008083601f840112151561401857600080fd5b8235905067ffffffffffffffff81111561403157600080fd5b60208301915083600182028301111561404957600080fd5b9250929050565b600082601f830112151561406357600080fd5b81356140766140718261492f565b6148da565b9150808252602083016020830185838301111561409257600080fd5b61409d838284614a6e565b50505092915050565b600082601f83011215156140b957600080fd5b81356140cc6140c78261495b565b6148da565b915080825260208301602083018583830111156140e857600080fd5b6140f3838284614a6e565b50505092915050565b60006141088235614a64565b905092915050565b60006020828403121561412257600080fd5b600061413084828501613ef2565b91505092915050565b6000806040838503121561414c57600080fd5b600061415a85828601613ef2565b925050602061416b85828601613ef2565b9150509250929050565b60008060006060848603121561418a57600080fd5b600061419886828701613ef2565b93505060206141a986828701613ef2565b92505060406141ba868287016140fc565b9150509250925092565b6000806000806000608086880312156141dc57600080fd5b60006141ea88828901613ef2565b95505060206141fb88828901613ef2565b945050604061420c888289016140fc565b935050606086013567ffffffffffffffff81111561422957600080fd5b61423588828901613fb8565b92509250509295509295909350565b6000806040838503121561425757600080fd5b600061426585828601613ef2565b925050602061427685828601613f7c565b9150509250929050565b6000806040838503121561429357600080fd5b60006142a185828601613ef2565b92505060206142b2858286016140fc565b9150509250929050565b6000602082840312156142ce57600080fd5b600082013567ffffffffffffffff8111156142e857600080fd5b6142f484828501613f06565b91505092915050565b60006020828403121561430f57600080fd5b600061431d84828501613f7c565b91505092915050565b60006020828403121561433857600080fd5b600061434684828501613f90565b91505092915050565b60006020828403121561436157600080fd5b600061436f84828501613fa4565b91505092915050565b60006020828403121561438a57600080fd5b600082013567ffffffffffffffff8111156143a457600080fd5b6143b0848285016140a6565b91505092915050565b6000602082840312156143cb57600080fd5b60006143d9848285016140fc565b91505092915050565b6000806000604084860312156143f757600080fd5b6000614405868287016140fc565b935050602084013567ffffffffffffffff81111561442257600080fd5b61442e86828701614004565b92509250509250925092565b6000806040838503121561444d57600080fd5b600061445b858286016140fc565b925050602061446c858286016140fc565b9150509250929050565b61447f8161499d565b82525050565b61448e816149bd565b82525050565b61449d816149c9565b82525050565b60006144ae82614987565b8084526144c2816020860160208601614a7d565b6144cb81614ab0565b602085010191505092915050565b60006144e482614992565b8084526144f8816020860160208601614a7d565b61450181614ab0565b602085010191505092915050565b6000601082527f416c6c20746f6b656e204d696e746564000000000000000000000000000000006020830152604082019050919050565b6000601482527f546f6b656e20616c7265616479206d696e7465640000000000000000000000006020830152604082019050919050565b6000601382527f4f6e6c79206f776e65722063616e2063616c6c000000000000000000000000006020830152604082019050919050565b6000601c82527f517565727920666f72206e6f6e2d6578697374616e7420746f6b656e000000006020830152604082019050919050565b6000601382527f4d696e74696e67206e6f7420616c6c6f776564000000000000000000000000006020830152604082019050919050565b6000601782527f53656e646572206973206e6f7420746865204f776e65720000000000000000006020830152604082019050919050565b6000601682527f4f6e6c7920637962657244414f2063616e206d696e74000000000000000000006020830152604082019050919050565b6000601082527f506179656d656e7420746f6f206c6f77000000000000000000000000000000006020830152604082019050919050565b6146d0816149f5565b82525050565b6146df816149ff565b82525050565b60006020820190506146fa6000830184614476565b92915050565b60006080820190506147156000830187614476565b6147226020830186614476565b61472f60408301856146c7565b818103606083015261474181846144a3565b905095945050505050565b60006020820190506147616000830184614485565b92915050565b600060208201905061477c6000830184614494565b92915050565b6000602082019050818103600083015261479c81846144d9565b905092915050565b600060208201905081810360008301526147bd8161450f565b9050919050565b600060208201905081810360008301526147dd81614546565b9050919050565b600060208201905081810360008301526147fd8161457d565b9050919050565b6000602082019050818103600083015261481d816145b4565b9050919050565b6000602082019050818103600083015261483d816145eb565b9050919050565b6000602082019050818103600083015261485d81614622565b9050919050565b6000602082019050818103600083015261487d81614659565b9050919050565b6000602082019050818103600083015261489d81614690565b9050919050565b60006020820190506148b960008301846146c7565b92915050565b60006020820190506148d460008301846146d6565b92915050565b6000604051905081810181811067ffffffffffffffff821117156148fd57600080fd5b8060405250919050565b600067ffffffffffffffff82111561491e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561494657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561497257600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffffff00000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614a9b578082015181840152602081019050614a80565b83811115614aaa576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201e3df8b6f060f551b15918effbd306db34e62eedba51221305d7ac064471ed1c6c6578706572696d656e74616cf50037",
  "deployedBytecode": "0x608060405260043610610204576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a714610209578063031bd4c41461024657806306fdde0314610271578063081812fc1461029c5780630838c22b146102d9578063095ea7b31461030457806318160ddd1461032d57806323b872dd146103585780632b481883146103815780632f745c59146103ac5780632f99c6cc146103e9578063309627af14610414578063397490641461043d57806342842e0e1461047a57806343589db8146104a35780634f6ccce7146104e0578063510b51581461051d578063613496ac1461055a5780636352211e146105975780636418413c146105d457806367242bb1146106115780636d5fd46b1461064e57806370a082311461067957806375020395146106b65780638da5cb5b146106f357806394e2021f1461071e57806395d89b411461074957806398f9c7c514610774578063a22cb465146107b1578063b4ad6962146107da578063b88d4fde14610803578063c87b56dd1461082c578063c951c9f914610869578063c9bf028b14610894578063d5d6ecda146108bd578063d5d922d8146108e6578063de7fe7e114610923578063e6239fac14610953578063e6a8375714610990578063e985e9c5146109bb578063f16bd0ad146109f8578063fac68e9314610a23575b600080fd5b34801561021557600080fd5b50610230600480360361022b9190810190614326565b610a4e565b60405161023d919061474c565b60405180910390f35b34801561025257600080fd5b5061025b610ab6565b60405161026891906148a4565b60405180910390f35b34801561027d57600080fd5b50610286610abc565b6040516102939190614782565b60405180910390f35b3480156102a857600080fd5b506102c360048036036102be91908101906143b9565b610b5e565b6040516102d091906146e5565b60405180910390f35b3480156102e557600080fd5b506102ee610c42565b6040516102fb91906148a4565b60405180910390f35b34801561031057600080fd5b5061032b60048036036103269190810190614280565b610c4e565b005b34801561033957600080fd5b50610342610f1f565b60405161034f91906148a4565b60405180910390f35b34801561036457600080fd5b5061037f600480360361037a9190810190614175565b610f29565b005b34801561038d57600080fd5b506103966111fc565b6040516103a3919061474c565b60405180910390f35b3480156103b857600080fd5b506103d360048036036103ce9190810190614280565b61120f565b6040516103e091906148a4565b60405180910390f35b3480156103f557600080fd5b506103fe6112c0565b60405161040b91906146e5565b60405180910390f35b34801561042057600080fd5b5061043b6004803603610436919081019061443a565b6112d8565b005b34801561044957600080fd5b50610464600480360361045f91908101906143b9565b61143e565b60405161047191906148bf565b60405180910390f35b34801561048657600080fd5b506104a1600480360361049c9190810190614175565b611468565b005b3480156104af57600080fd5b506104ca60048036036104c59190810190614378565b611489565b6040516104d7919061474c565b60405180910390f35b3480156104ec57600080fd5b50610507600480360361050291908101906143b9565b611622565b60405161051491906148a4565b60405180910390f35b34801561052957600080fd5b50610544600480360361053f91908101906143b9565b61163c565b60405161055191906146e5565b60405180910390f35b34801561056657600080fd5b50610581600480360361057c919081019061443a565b611679565b60405161058e91906148a4565b60405180910390f35b3480156105a357600080fd5b506105be60048036036105b991908101906143b9565b6116a9565b6040516105cb91906146e5565b60405180910390f35b3480156105e057600080fd5b506105fb60048036036105f691908101906143b9565b611722565b6040516106089190614767565b60405180910390f35b34801561061d57600080fd5b50610638600480360361063391908101906143b9565b611983565b60405161064591906148a4565b60405180910390f35b34801561065a57600080fd5b5061066361199b565b60405161067091906148a4565b60405180910390f35b34801561068557600080fd5b506106a0600480360361069b9190810190614110565b6119a0565b6040516106ad91906148a4565b60405180910390f35b3480156106c257600080fd5b506106dd60048036036106d891908101906143b9565b6119ed565b6040516106ea9190614782565b60405180910390f35b3480156106ff57600080fd5b50610708611ac1565b60405161071591906146e5565b60405180910390f35b34801561072a57600080fd5b50610733611ae7565b60405161074091906148a4565b60405180910390f35b34801561075557600080fd5b5061075e611af3565b60405161076b9190614782565b60405180910390f35b34801561078057600080fd5b5061079b60048036036107969190810190614378565b611b95565b6040516107a8919061474c565b60405180910390f35b3480156107bd57600080fd5b506107d860048036036107d39190810190614244565b611c17565b005b3480156107e657600080fd5b5061080160048036036107fc91908101906143b9565b611d13565b005b34801561080f57600080fd5b5061082a600480360361082591908101906141c4565b611e9d565b005b34801561083857600080fd5b50610853600480360361084e91908101906143b9565b611ee2565b6040516108609190614782565b60405180910390f35b34801561087557600080fd5b5061087e61231d565b60405161088b91906148a4565b60405180910390f35b3480156108a057600080fd5b506108bb60048036036108b691908101906142fd565b612329565b005b3480156108c957600080fd5b506108e460048036036108df91908101906142bc565b6123d8565b005b3480156108f257600080fd5b5061090d6004803603610908919081019061443a565b612526565b60405161091a9190614782565b60405180910390f35b61093d600480360361093891908101906143e2565b61257e565b60405161094a91906148a4565b60405180910390f35b34801561095f57600080fd5b5061097a600480360361097591908101906143b9565b6128c8565b60405161098791906148a4565b60405180910390f35b34801561099c57600080fd5b506109a56128e8565b6040516109b291906148a4565b60405180910390f35b3480156109c757600080fd5b506109e260048036036109dd9190810190614139565b6128f4565b6040516109ef919061474c565b60405180910390f35b348015610a0457600080fd5b50610a0d612987565b604051610a1a91906146e5565b60405180910390f35b348015610a2f57600080fd5b50610a3861299f565b604051610a4591906148a4565b60405180910390f35b600060056000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b61020081565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b545780601f10610b2957610100808354040283529160200191610b54565b820191906000526020600020905b815481529060010190602001808311610b3757829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610c06576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bfd90614804565b60405180910390fd5b6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6701aea1c342faa80081565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610d4857506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610d5357600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610df9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610df090614804565b60405180910390fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610e6a57600080fd5b856001600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000600654905090565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610ffc57503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8061108c57506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561109757600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561113d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161113490614804565b60405180910390fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161415156111ad57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156111e957600080fd5b6111f386866129aa565b50505050505050565b600960009054906101000a900460ff1681565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490508210151561126157600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156112ad57fe5b9060005260206000200154905092915050565b730800b5479e4e47e7caed7c5e9b74ec44d3f0606a81565b81600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590614804565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600a600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611421576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611418906147e4565b60405180910390fd5b81600f600085815260200190815260200160002081905550505050565b6000600b600083815260200190815260200160002060009054906101000a900460ff169050919050565b6114848383836020604051908101604052806000815250612a5f565b505050565b60006011826040518082805190602001908083835b6020831015156114c3578051825260208201915060208101905060208303925061149e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16801561158657506012826040518082805190602001908083835b602083101515611543578051825260208201915060208101905060208303925061151e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16155b156116185760016012836040518082805190602001908083835b6020831015156115c557805182526020820191506020810190506020830392506115a0565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055506001905061161d565b600090505b919050565b60006006548210151561163457600080fd5b819050919050565b6000600a600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60106020528160005260406000208181548110151561169457fe5b90600052602060002001600091509150505481565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561171d57600080fd5b919050565b6000806000600b600085815260200190815260200160002060009054906101000a900460ff16905060008160ff16141561175b57600080fd5b60018160ff16141561179257642e582f5c2e7b01000000000000000000000000000000000000000000000000000000029150611979565b60028160ff1614156117c957642e2b2d7c2e7b01000000000000000000000000000000000000000000000000000000029150611978565b60038160ff16141561180057642e2f5c2e2e7b01000000000000000000000000000000000000000000000000000000029150611977565b60048160ff16141561183757642e5c7c2d2f7b01000000000000000000000000000000000000000000000000000000029150611976565b60058160ff16141561186e57642e4f7c2d2e7b01000000000000000000000000000000000000000000000000000000029150611975565b60068160ff1614156118a557642e5c5c2e2e7b01000000000000000000000000000000000000000000000000000000029150611974565b60078160ff1614156118dc57642e237c2d2b7b01000000000000000000000000000000000000000000000000000000029150611973565b60088160ff16141561191357642e4f4f2e2e7b01000000000000000000000000000000000000000000000000000000029150611972565b60098160ff16141561194a57642e232e2e2e7b01000000000000000000000000000000000000000000000000000000029150611971565b642e234f2e2e7b010000000000000000000000000000000000000000000000000000000291505b5b5b5b5b5b5b5b5b8192505050919050565b600f6020528060005260406000206000915090505481565b600f81565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141515156119dd57600080fd5b6119e682612e62565b9050919050565b6060600082600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a97576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a8e90614804565b60405180910390fd5b600c6000858152602001908152602001600020549150611ab8848343612eae565b92505050919050565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6701d2849893fea40081565b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b8b5780601f10611b6057610100808354040283529160200191611b8b565b820191906000526020600020905b815481529060010190602001808311611b6e57829003601f168201915b5050505050905090565b60006011826040518082805190602001908083835b602083101515611bcf5780518252602082019150602081019050602083039250611baa565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d07919061474c565b60405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611db9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db090614804565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff16600a600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611e5c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e53906147e4565b60405180910390fd5b601060008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b611edb85858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612a5f565b5050505050565b6060600080600060608060608088600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611f95576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f8c90614804565b60405180910390fd5b600f60008b8152602001908152602001600020549750601060008b815260200190815260200160002088815481101515611fcb57fe5b90600052602060002001549650600c60008b8152602001908152602001600020549550611ff98a8789612eae565b9450600e60008b815260200190815260200160002060009054906101000a900460ff1661205b576040805190810160405280600581526020017f66616c7365000000000000000000000000000000000000000000000000000000815250612092565b6040805190810160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b9350612274848660405160200180807f7b226e616d65223a20225965726f222c20000000000000000000000000000000815250601101807f226465736372697074696f6e223a202244796e616d69632047656e657261746981526020017f766520417274222c000000000000000000000000000000000000000000000000815250602801807f2261747472696275746573223a205b7b00000000000000000000000000000000815250601001807f22697347656e65736973223a2022000000000000000000000000000000000000815250600e0183805190602001908083835b6020831015156121975780518252602082019150602081019050602083039250612172565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d5d2c2022696d616765223a20220000000000000000000000000000000000815250600f0182805190602001908083835b60208310151561221257805182526020820191506020810190506020830392506121ed565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d00000000000000000000000000000000000000000000000000000000000081525060020192505050604051602081830303815290604052613408565b92508260405160200180807f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250601d0182805190602001908083835b6020831015156122d757805182526020820191506020810190506020830392506122b2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405291508198505050505050505050919050565b670166dc26993a080081565b601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156123bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123b290614844565b60405180910390fd5b80600960006101000a81548160ff02191690831515021790555050565b6000601360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561246c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161246390614844565b60405180910390fd5b600090505b81518110156125225760016011838381518110151561248c57fe5b906020019060200201516040518082805190602001908083835b6020831015156124cb57805182526020820191506020810190506020830392506124a6565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055508080600101915050612471565b5050565b60606000600c60008581526020019081526020016000205490506125758482601060008881526020019081526020016000208681548110151561256557fe5b9060005260206000200154612eae565b91505092915050565b6000600960009054906101000a900460ff1615156125d1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125c890614824565b60405180910390fd5b610200600654101515612619576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612610906147a4565b60405180910390fd5b600f60065410156126ad5773945a8480d61d85ed755013169dc165574d751d1a73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156126a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269f90614864565b60405180910390fd5b612882565b601e60065410156127095766d750d5fd41e0003410151515612704576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fb90614884565b60405180910390fd5b612881565b6050600654101561276657670142f940fbe2d0003410151515612761576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161275890614884565b60405180910390fd5b612880565b6101b060065410156127c457670166dc26993a080034101515156127bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127b690614884565b60405180910390fd5b61287f565b6101e26006541015612822576701aea1c342faa800341015151561281d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281490614884565b60405180910390fd5b61287e565b61020060065411151561287d576701d2849893fea400341015151561287c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161287390614884565b60405180910390fd5b5b5b5b5b5b5b6128bf338585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050613591565b90509392505050565b600060106000838152602001908152602001600020805490509050919050565b670142f940fbe2d00081565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b73945a8480d61d85ed755013169dc165574d751d1a81565b66d750d5fd41e00081565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506129eb8261393e565b6129f581836139e1565b6129ff8383613c17565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000808360006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480612b3357503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80612bc357506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612bce57600080fd5b85600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612c74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6b90614804565b60405180910390fd5b6002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515612ce457600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614151515612d2057600080fd5b612d2a88886129aa565b612d3388613d62565b15612e57578773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612d939493929190614700565b602060405180830381600087803b158015612dad57600080fd5b505af1158015612dc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250612de5919081019061434f565b935063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916141515612e5657600080fd5b5b505050505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600060606000612ebe613e61565b600080600080600060608c8c60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b602083101515612f255780518252602082019150602081019050602083039250612f00565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169950601e6003604001604002016040519080825280601f01601f191660200182016040528015612fab5781602001602082028038833980820191505090505b509850600097505b601e88101561306c576014888154600181600116156101000203166002900481101515612fdc57fe5b815460011615612ffb5790600052602060002090602091828204019190065b9054901a7f010000000000000000000000000000000000000000000000000000000000000002898981518110151561302f57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508780600101985050612fb3565b60009550600094506000935060008760000181815250506005600b8b81151561309157fe5b06018760200181815250506130a58e611722565b87604001907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600092505b60408312156133f15760016002604081151561310957fe5b058403600202019450600160038b81151561312057fe5b06141561313257846000039450613154565b600260038b81151561314057fe5b0614156131535761315085613d75565b94505b5b8985029450600091505b60408212156132a65760016002604081151561317657fe5b058303600202019550600160028b81151561318d57fe5b0614156131a05761319d86613d75565b95505b898602955086602001516401000000008688028115156131bc57fe5b058115156131c657fe5b0693506005841015613238578660400151846005811015156131e457fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f01000000000000000000000000000000000000000000000000000000000000009004876000018181525050613244565b602e8760000181815250505b60f887600001519060020a02600102898981518110151561326157fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508780600101985050818060010192505061315e565b60257f01000000000000000000000000000000000000000000000000000000000000000289898151811015156132d857fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060307f010000000000000000000000000000000000000000000000000000000000000002898981518110151561334257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060417f01000000000000000000000000000000000000000000000000000000000000000289898151811015156133ac57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505082806001019350506130f1565b889050809a50505050505050505050509392505050565b606080600060606000855114156134315760206040519081016040528060008152509350613589565b606060405190810160405280604081526020017f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656681526020017f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f8152509250600360028651018115156134a057fe5b046004029150602082016040519080825280601f01601f1916602001820160405280156134dc5781602001602082028038833980820191505090505b509050818152600183018586518101602084015b8183101561354b576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f81168501518253600182019150506134f0565b600389510660018114613565576002811461357557613580565b613d3d60f01b6002830352613580565b603d60f81b60018303525b50505050508093505b505050919050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156135d157600080fd5b6000600d600087815260200190815260200160002054141515613629576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613620906147c4565b60405180910390fd5b600160065401915085600a600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600c60008481526020019081526020016000208190555081600d6000878152602001908152602001600020819055506136bc84611489565b156136ee576001600e600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b84604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515613743578051825260208201915060208101905060208303925061371e565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff16905061379581613d94565b600b600084815260200190815260200160002060006101000a81548160ff021916908360ff160217905550601060008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055506000600f6000848152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff16827f85dce40a3d477c839b8a58d43ecae72c5d41bfdfcf52fc3923c5aaba3e6483f14360405161385d91906148a4565b60405180910390a360016006540160068190555061387b8683613c17565b730800b5479e4e47e7caed7c5e9b74ec44d3f0606a73ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f193505050501580156138d5573d6000803e3d6000fd5b50818673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a443925050509392505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415156139de576001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b50565b60008060008473ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613a5357600080fd5b6002600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600360008581526020019081526020016000205492506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500391508282141515613bbd57600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515613b3c57fe5b9060005260206000200154905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515613b9657fe5b90600052602060002001819055508260036000838152602001908152602001600020819055505b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003613c0f9190613ea1565b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613c8657600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150559050600181036003600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b60008082121515613d8857819050613d8f565b8160000390505b919050565b6000806000605384811515613da557fe5b0691506014821015613dba5760019050613e57565b6023821015613dcc5760029050613e56565b6030821015613dde5760039050613e55565b603b821015613df05760049050613e54565b6044821015613e025760059050613e53565b6049821015613e145760069050613e52565b604d821015613e265760079050613e51565b6050821015613e385760089050613e50565b6052821015613e4a5760099050613e4f565b600a90505b5b5b5b5b5b5b5b5b8092505050919050565b606060405190810160405280600081526020016000815260200160007affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525090565b815481835581811115613ec857818360005260206000209182019101613ec79190613ecd565b5b505050565b613eef91905b80821115613eeb576000816000905550600101613ed3565b5090565b90565b6000613efe8235614a0c565b905092915050565b600082601f8301121515613f1957600080fd5b8135613f2c613f2782614907565b6148da565b9150818183526020840193506020810190508360005b83811015613f725781358601613f588882614050565b845260208401935060208301925050600181019050613f42565b5050505092915050565b6000613f888235614a2c565b905092915050565b6000613f9c8235614a38565b905092915050565b6000613fb08251614a38565b905092915050565b60008083601f8401121515613fcc57600080fd5b8235905067ffffffffffffffff811115613fe557600080fd5b602083019150836001820283011115613ffd57600080fd5b9250929050565b60008083601f840112151561401857600080fd5b8235905067ffffffffffffffff81111561403157600080fd5b60208301915083600182028301111561404957600080fd5b9250929050565b600082601f830112151561406357600080fd5b81356140766140718261492f565b6148da565b9150808252602083016020830185838301111561409257600080fd5b61409d838284614a6e565b50505092915050565b600082601f83011215156140b957600080fd5b81356140cc6140c78261495b565b6148da565b915080825260208301602083018583830111156140e857600080fd5b6140f3838284614a6e565b50505092915050565b60006141088235614a64565b905092915050565b60006020828403121561412257600080fd5b600061413084828501613ef2565b91505092915050565b6000806040838503121561414c57600080fd5b600061415a85828601613ef2565b925050602061416b85828601613ef2565b9150509250929050565b60008060006060848603121561418a57600080fd5b600061419886828701613ef2565b93505060206141a986828701613ef2565b92505060406141ba868287016140fc565b9150509250925092565b6000806000806000608086880312156141dc57600080fd5b60006141ea88828901613ef2565b95505060206141fb88828901613ef2565b945050604061420c888289016140fc565b935050606086013567ffffffffffffffff81111561422957600080fd5b61423588828901613fb8565b92509250509295509295909350565b6000806040838503121561425757600080fd5b600061426585828601613ef2565b925050602061427685828601613f7c565b9150509250929050565b6000806040838503121561429357600080fd5b60006142a185828601613ef2565b92505060206142b2858286016140fc565b9150509250929050565b6000602082840312156142ce57600080fd5b600082013567ffffffffffffffff8111156142e857600080fd5b6142f484828501613f06565b91505092915050565b60006020828403121561430f57600080fd5b600061431d84828501613f7c565b91505092915050565b60006020828403121561433857600080fd5b600061434684828501613f90565b91505092915050565b60006020828403121561436157600080fd5b600061436f84828501613fa4565b91505092915050565b60006020828403121561438a57600080fd5b600082013567ffffffffffffffff8111156143a457600080fd5b6143b0848285016140a6565b91505092915050565b6000602082840312156143cb57600080fd5b60006143d9848285016140fc565b91505092915050565b6000806000604084860312156143f757600080fd5b6000614405868287016140fc565b935050602084013567ffffffffffffffff81111561442257600080fd5b61442e86828701614004565b92509250509250925092565b6000806040838503121561444d57600080fd5b600061445b858286016140fc565b925050602061446c858286016140fc565b9150509250929050565b61447f8161499d565b82525050565b61448e816149bd565b82525050565b61449d816149c9565b82525050565b60006144ae82614987565b8084526144c2816020860160208601614a7d565b6144cb81614ab0565b602085010191505092915050565b60006144e482614992565b8084526144f8816020860160208601614a7d565b61450181614ab0565b602085010191505092915050565b6000601082527f416c6c20746f6b656e204d696e746564000000000000000000000000000000006020830152604082019050919050565b6000601482527f546f6b656e20616c7265616479206d696e7465640000000000000000000000006020830152604082019050919050565b6000601382527f4f6e6c79206f776e65722063616e2063616c6c000000000000000000000000006020830152604082019050919050565b6000601c82527f517565727920666f72206e6f6e2d6578697374616e7420746f6b656e000000006020830152604082019050919050565b6000601382527f4d696e74696e67206e6f7420616c6c6f776564000000000000000000000000006020830152604082019050919050565b6000601782527f53656e646572206973206e6f7420746865204f776e65720000000000000000006020830152604082019050919050565b6000601682527f4f6e6c7920637962657244414f2063616e206d696e74000000000000000000006020830152604082019050919050565b6000601082527f506179656d656e7420746f6f206c6f77000000000000000000000000000000006020830152604082019050919050565b6146d0816149f5565b82525050565b6146df816149ff565b82525050565b60006020820190506146fa6000830184614476565b92915050565b60006080820190506147156000830187614476565b6147226020830186614476565b61472f60408301856146c7565b818103606083015261474181846144a3565b905095945050505050565b60006020820190506147616000830184614485565b92915050565b600060208201905061477c6000830184614494565b92915050565b6000602082019050818103600083015261479c81846144d9565b905092915050565b600060208201905081810360008301526147bd8161450f565b9050919050565b600060208201905081810360008301526147dd81614546565b9050919050565b600060208201905081810360008301526147fd8161457d565b9050919050565b6000602082019050818103600083015261481d816145b4565b9050919050565b6000602082019050818103600083015261483d816145eb565b9050919050565b6000602082019050818103600083015261485d81614622565b9050919050565b6000602082019050818103600083015261487d81614659565b9050919050565b6000602082019050818103600083015261489d81614690565b9050919050565b60006020820190506148b960008301846146c7565b92915050565b60006020820190506148d460008301846146d6565b92915050565b6000604051905081810181811067ffffffffffffffff821117156148fd57600080fd5b8060405250919050565b600067ffffffffffffffff82111561491e57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561494657600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561497257600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffffff00000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015614a9b578082015181840152602081019050614a80565b83811115614aaa576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058201e3df8b6f060f551b15918effbd306db34e62eedba51221305d7ac064471ed1c6c6578706572696d656e74616cf50037",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.\r",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.\r",
          "_tokenId": "ID of the token to be approved.\r"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r considered invalid, and this function throws for queries about the zero address.\r",
        "params": {
          "_owner": "Address for whom to query the balance.\r"
        },
        "return": "Balance of _owner.\r"
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.\r",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of.\r"
        },
        "return": "Address that _tokenId is approved for.\r"
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.\r",
        "params": {
          "_operator": "The address that acts on behalf of the owner.\r",
          "_owner": "The address that owns the NFTs.\r"
        },
        "return": "True if approved for all, false otherwise.\r"
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.\r",
        "return": "Representing name.\r"
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r invalid, and queries about them do throw.\r",
        "params": {
          "_tokenId": "The identifier for an NFT.\r"
        },
        "return": "Address of _tokenId owner.\r"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can\r be changed to payable.\r",
        "params": {
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can\r be changed to payable.\r",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.\r",
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "saveTokenURI(uint256)": {
        "details": "Save the block.number inside an array.",
        "params": {
          "_tokenId": "Id for which we want uri."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of\r `msg.sender`'s assets. It also emits the ApprovalForAll event.\r",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.\r",
          "_operator": "Address to add to the set of authorized operators.\r"
        }
      },
      "setTokenIdDefaultIndex(uint256,uint256)": {
        "details": "Set the default index for the tokenURI.",
        "params": {
          "_defaultIndex": "Index of block.number used to build the tokenURI to set as default.",
          "_tokenId": "Id for which we want uri."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.\r",
        "params": {
          "_interfaceID": "Id of the interface.\r"
        },
        "return": "True if _interfaceID is supported, false otherwise.\r"
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.\r",
        "return": "Representing symbol.\r"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "returns the n-th NFT ID from a list of owner's tokens.\r",
        "params": {
          "_index": "Index number representing n-th token in owner's list of tokens.\r",
          "_owner": "Token owner's address.\r"
        },
        "return": "Token id.\r"
      },
      "tokenURI(uint256)": {
        "details": "A distinct URI (RFC 3986) for a given NFT.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\r",
        "params": {
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "viewCurrentTokenURI(uint256)": {
        "details": "View the current tokenURI for a given tokenId at the current block.",
        "params": {
          "_tokenId": "Id for which we want the current uri."
        },
        "return": "URI of _tokenId."
      },
      "viewSpecificTokenURI(uint256,uint256)": {
        "details": "View a specific, already saved tokenURI.",
        "params": {
          "_index": "Index for which we want to see the tokenURI.",
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is\r the current NFT owner, or an authorized operator of the current owner.\r"
      },
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT.\r"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this\r function just sets data to \"\"\r"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the\r approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r function checks if `_to` is a smart contract (code size > 0). If so, it calls\r `onERC721Received` on `_to` and throws if the return value is not\r `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time.\r"
      },
      "totalSupply()": {
        "notice": "/ Enumerable\r"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r they maybe be permanently lost.\r"
      }
    }
  }
}