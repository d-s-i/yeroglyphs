{
  "address": "0x58633c880F3Df66835dBBa99f9888EC5100D9Aab",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TOKEN_LIMIT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "_name",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BENEFICIARY",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_defaultIndex",
          "type": "uint256"
        }
      ],
      "name": "setTokenIdDefaultIndex",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "symbolScheme",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockNumberSaved",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getSymbol",
      "outputs": [
        {
          "name": "",
          "type": "bytes5"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdDefaultIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "viewCurrentTokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "saveTokenURI",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "viewSpecificTokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "seed",
          "type": "uint256"
        }
      ],
      "name": "createGlyph",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "a",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Generated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "transactionHash": "0xdedb52101d665f7b519973793c3971c7b4fd31af8a52c7ada72b0f74081c34ae",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x58633c880F3Df66835dBBa99f9888EC5100D9Aab",
    "transactionIndex": 10,
    "gasUsed": "3151606",
    "logsBloom": "0x
    "blockHash": "0x8e52deff9acae32dbc562da5ea55b9ee58aa3762a10c54dc9063b83aea951551",
    "transactionHash": "0xdedb52101d665f7b519973793c3971c7b4fd31af8a52c7ada72b0f74081c34ae",
    "logs": [],
    "blockNumber": 9709203,
    "cumulativeGasUsed": "4524348",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "1aa83d0f0543db11772239c9827651dc",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.6ae8fb59\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BENEFICIARY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_defaultIndex\",\"type\":\"uint256\"}],\"name\":\"setTokenIdDefaultIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"symbolScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockNumberSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdDefaultIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"viewCurrentTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"saveTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"viewSpecificTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"}],\"name\":\"createGlyph\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Generated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\r\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\\r\",\"_tokenId\":\"ID of the token to be approved.\\r\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\r considered invalid, and this function throws for queries about the zero address.\\r\",\"params\":{\"_owner\":\"Address for whom to query the balance.\\r\"},\"return\":\"Balance of _owner.\\r\"},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\\r\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\\r\"},\"return\":\"Address that _tokenId is approved for.\\r\"},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\\r\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\\r\",\"_owner\":\"The address that owns the NFTs.\\r\"},\"return\":\"True if approved for all, false otherwise.\\r\"},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\\r\",\"return\":\"Representing name.\\r\"},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\r invalid, and queries about them do throw.\\r\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\\r\"},\"return\":\"Address of _tokenId owner.\\r\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can\\r be changed to payable.\\r\",\"params\":{\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can\\r be changed to payable.\\r\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\\r\",\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"saveTokenURI(uint256)\":{\"details\":\"Save the token URI inside an array.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\r `msg.sender`'s assets. It also emits the ApprovalForAll event.\\r\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\\r\",\"_operator\":\"Address to add to the set of authorized operators.\\r\"}},\"setTokenIdDefaultIndex(uint256,uint256)\":{\"details\":\"Set the default index for the tokenURI.\",\"params\":{\"_defaultIndex\":\"Index of tokenURI to set as default.\",\"_tokenId\":\"Id for which we want uri.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\\r\",\"params\":{\"_interfaceID\":\"Id of the interface.\\r\"},\"return\":\"True if _interfaceID is supported, false otherwise.\\r\"},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\\r\",\"return\":\"Representing symbol.\\r\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"returns the n-th NFT ID from a list of owner's tokens.\\r\",\"params\":{\"_index\":\"Index number representing n-th token in owner's list of tokens.\\r\",\"_owner\":\"Token owner's address.\\r\"},\"return\":\"Token id.\\r\"},\"tokenURI(uint256)\":{\"details\":\"A distinct URI (RFC 3986) for a given NFT.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\r address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\r address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\r\",\"params\":{\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"viewCurrentTokenURI(uint256)\":{\"details\":\"View the current tokenURI for a given tokenId.\",\"params\":{\"_tokenId\":\"Id for which we want the current uri.\"},\"return\":\"URI of _tokenId.\"},\"viewSpecificTokenURI(uint256,uint256)\":{\"details\":\"View a specific, already saved tokenURI.\",\"params\":{\"_index\":\"Index for which we want to see the tokenURI.\",\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is\\r the current NFT owner, or an authorized operator of the current owner.\\r\"},\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\\r\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this\\r function just sets data to \\\"\\\"\\r\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the\\r approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\r the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\r function checks if `_to` is a smart contract (code size > 0). If so, it calls\\r `onERC721Received` on `_to` and throws if the return value is not\\r `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\r\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\\r\"},\"totalSupply()\":{\"notice\":\"/ Enumerable\\r\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\r they maybe be permanently lost.\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Yero.sol\":\"Yero\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC721.sol\":{\"content\":\"// SPDX-Licenser-Identifier: MIT\\r\\npragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./interfaces/ERC721TokenReceiver.sol\\\";\\r\\n\\r\\ncontract ERC721 {\\r\\n    \\r\\n    event Generated(uint indexed index, address indexed a, uint256 value);\\r\\n\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from owner address to mapping of operator addresses.\\r\\n     */\\r\\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from NFT ID to approved address.\\r\\n     */\\r\\n    mapping (uint256 => address) internal idToApproval;\\r\\n\\r\\n    /**\\r\\n     * @dev A mapping from NFT ID to the address that owns it.\\r\\n     */\\r\\n    mapping (uint256 => address) internal idToOwner;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from NFT ID to its index in the owner tokens list.\\r\\n     */\\r\\n    mapping(uint256 => uint256) internal idToOwnerIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from owner to list of owned NFT IDs.\\r\\n     */\\r\\n    mapping(address => uint256[]) internal ownerToIds;\\r\\n\\r\\n    // ERC 165\\r\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens.\\r\\n     */\\r\\n    uint internal numTokens = 0;\\r\\n\\r\\n    string internal nftName = \\\"Yero\\\";\\r\\n    string internal nftSymbol = \\\"\\u1d79\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Contract constructor.\\r\\n     */\\r\\n    constructor() public {\\r\\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\\r\\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\\r\\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\\r\\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\\r\\n     * @param _tokenId ID of the NFT to validate.\\r\\n     */\\r\\n    modifier canOperate(uint256 _tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Guarantees that the msg.sender is allowed to transfer NFT.\\r\\n     * @param _tokenId ID of the NFT to transfer.\\r\\n     */\\r\\n    modifier canTransfer(uint256 _tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(\\r\\n            tokenOwner == msg.sender\\r\\n            || idToApproval[_tokenId] == msg.sender\\r\\n            || ownerToOperators[tokenOwner][msg.sender]\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Guarantees that _tokenId is a valid Token.\\r\\n     * @param _tokenId ID of the NFT to validate.\\r\\n     */\\r\\n    modifier validNFToken(uint256 _tokenId) {\\r\\n        require(idToOwner[_tokenId] != address(0));\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if `_operator` is an approved operator for `_owner`.\\r\\n     * @param _owner The address that owns the NFTs.\\r\\n     * @param _operator The address that acts on behalf of the owner.\\r\\n     * @return True if approved for all, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\\r\\n        return ownerToOperators[_owner][_operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\r\\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\\r\\n     * @notice This works even if sender doesn't own any tokens at the time.\\r\\n     * @param _operator Address to add to the set of authorized operators.\\r\\n     * @param _approved True if the operators is approved, false to revoke approval.\\r\\n     */\\r\\n    function setApprovalForAll(address _operator, bool _approved) external {\\r\\n        ownerToOperators[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n    \\r\\n      //////////////////////////\\r\\n     //// ERC 721 and 165  ////\\r\\n    //////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check which interfaces are suported by this contract.\\r\\n     * @param _interfaceID Id of the interface.\\r\\n     * @return True if _interfaceID is supported, false otherwise.\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\\r\\n        return supportedInterfaces[_interfaceID];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the target address is a contract.\\r\\n     * @param _addr Address to check.\\r\\n     * @return True if _addr is a contract, false if not.\\r\\n     */\\r\\n    function isContract(address _addr) internal view returns (bool addressCheck) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(_addr) } // solhint-disable-line\\r\\n        addressCheck = size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\r\\n     * be changed to payable.\\r\\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\r\\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\r\\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\r\\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n     * `onERC721Received` on `_to` and throws if the return value is not\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\\r\\n        _safeTransferFrom(_from, _to, _tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\r\\n     * be changed to payable.\\r\\n     * @notice This works identically to the other function with an extra data parameter, except this\\r\\n     * function just sets data to \\\"\\\"\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\\r\\n        _safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\r\\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\r\\n     * address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\r\\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\r\\n     * they maybe be permanently lost.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == _from);\\r\\n        require(_to != address(0));\\r\\n        _transfer(_to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\r\\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\r\\n     * the current NFT owner, or an authorized operator of the current owner.\\r\\n     * @param _approved Address to be approved for the given NFT ID.\\r\\n     * @param _tokenId ID of the token to be approved.\\r\\n     */\\r\\n    function approve(address _approved, uint256 _tokenId) external canOperate(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(_approved != tokenOwner);\\r\\n        idToApproval[_tokenId] = _approved;\\r\\n        emit Approval(tokenOwner, _approved, _tokenId);\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Actually perform the safeTransferFrom.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\r\\n     */\\r\\n    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == _from);\\r\\n        require(_to != address(0));\\r\\n\\r\\n        _transfer(_to, _tokenId);\\r\\n\\r\\n        if (isContract(_to)) {\\r\\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\\r\\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Actually preforms the transfer.\\r\\n     * @notice Does NO checks.\\r\\n     * @param _to Address of a new owner.\\r\\n     * @param _tokenId The NFT that is being transferred.\\r\\n     */\\r\\n    function _transfer(address _to, uint256 _tokenId) internal {\\r\\n        address from = idToOwner[_tokenId];\\r\\n        _clearApproval(_tokenId);\\r\\n\\r\\n        _removeNFToken(from, _tokenId);\\r\\n        _addNFToken(_to, _tokenId);\\r\\n\\r\\n        emit Transfer(from, _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Assigns a new NFT to an address.\\r\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\r\\n     * @param _to Address to which we want to add the NFT.\\r\\n     * @param _tokenId Which NFT we want to add.\\r\\n     */\\r\\n    function _addNFToken(address _to, uint256 _tokenId) internal {\\r\\n        require(idToOwner[_tokenId] == address(0));\\r\\n        idToOwner[_tokenId] = _to;\\r\\n\\r\\n        uint256 length = ownerToIds[_to].push(_tokenId);\\r\\n        idToOwnerIndex[_tokenId] = length - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a NFT from an address.\\r\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\r\\n     * @param _from Address from wich we want to remove the NFT.\\r\\n     * @param _tokenId Which NFT we want to remove.\\r\\n     */\\r\\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\\r\\n        require(idToOwner[_tokenId] == _from);\\r\\n        delete idToOwner[_tokenId];\\r\\n\\r\\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\\r\\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\\r\\n\\r\\n        if (lastTokenIndex != tokenToRemoveIndex) {\\r\\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\\r\\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\\r\\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\\r\\n        }\\r\\n\\r\\n        ownerToIds[_from].length--;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Clears the current approval of a given NFT ID.\\r\\n     * @param _tokenId ID of the NFT to be transferred.\\r\\n     */\\r\\n    function _clearApproval(uint256 _tokenId) private {\\r\\n        if (idToApproval[_tokenId] != address(0)) {\\r\\n            delete idToApproval[_tokenId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the approved address for a single NFT.\\r\\n     * @notice Throws if `_tokenId` is not a valid NFT.\\r\\n     * @param _tokenId ID of the NFT to query the approval of.\\r\\n     * @return Address that _tokenId is approved for.\\r\\n     */\\r\\n    function getApproved(uint256 _tokenId) external view validNFToken(_tokenId) returns (address) {\\r\\n        return idToApproval[_tokenId];\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\r\\n     * extension to remove double storage (gas optimization) of owner nft count.\\r\\n     * @param _owner Address for whom to query the count.\\r\\n     * @return Number of _owner NFTs.\\r\\n     */\\r\\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\\r\\n        return ownerToIds[_owner].length;\\r\\n    }\\r\\n\\r\\n    //// Enumerable\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return numTokens;\\r\\n    }\\r\\n\\r\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\r\\n        require(index < numTokens);\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns the n-th NFT ID from a list of owner's tokens.\\r\\n     * @param _owner Token owner's address.\\r\\n     * @param _index Index number representing n-th token in owner's list of tokens.\\r\\n     * @return Token id.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\\r\\n        require(_index < ownerToIds[_owner].length);\\r\\n        return ownerToIds[_owner][_index];\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\r\\n     * considered invalid, and this function throws for queries about the zero address.\\r\\n     * @param _owner Address for whom to query the balance.\\r\\n     * @return Balance of _owner.\\r\\n     */\\r\\n    function balanceOf(address _owner) external view returns (uint256) {\\r\\n        require(_owner != address(0));\\r\\n        return _getOwnerNFTCount(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\r\\n     * invalid, and queries about them do throw.\\r\\n     * @param _tokenId The identifier for an NFT.\\r\\n     * @return Address of _tokenId owner.\\r\\n     */\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\\r\\n        _owner = idToOwner[_tokenId];\\r\\n        require(_owner != address(0));\\r\\n    }\\r\\n    \\r\\n    //// Metadata\\r\\n\\r\\n    /**\\r\\n      * @dev Returns a descriptive name for a collection of NFTokens.\\r\\n      * @return Representing name.\\r\\n      */\\r\\n    function name() external view returns (string memory _name) {\\r\\n        _name = nftName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an abbreviated name for NFTokens.\\r\\n     * @return Representing symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory _symbol) {\\r\\n        _symbol = nftSymbol;\\r\\n    }\\r\\n}\",\"keccak256\":\"0xf18584f04f115fac28acf3de434f625c75092c1e0b4e7a718f595af50144181c\"},\"contracts/Yero.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2019-04-05\\n*/\\n\\npragma solidity ^0.4.24;\\n\\n/**\\n *\\n *      ***    **     ** ********  *******   ******   **     **    ** ********  **     **  ******\\n *     ** **   **     **    **    **     ** **    **  **      **  **  **     ** **     ** **    **\\n *    **   **  **     **    **    **     ** **        **       ****   **     ** **     ** **\\n *   **     ** **     **    **    **     ** **   **** **        **    ********  *********  ******\\n *   ********* **     **    **    **     ** **    **  **        **    **        **     **       **\\n *   **     ** **     **    **    **     ** **    **  **        **    **        **     ** **    **\\n *   **     **  *******     **     *******   ******   ********  **    **        **     **  ******\\n *\\n *\\n *                                                                by Matt Hall and John Watkinson\\n *\\n *\\n * The output of the 'tokenURI' function is a set of instructions to make a drawing.\\n * Each symbol in the output corresponds to a cell, and there are 64x64 cells arranged in a square grid.\\n * The drawing can be any size, and the pen's stroke width should be between 1/5th to 1/10th the size of a cell.\\n * The drawing instructions for the nine different symbols are as follows:\\n *\\n *   .  Draw nothing in the cell.\\n *   O  Draw a circle bounded by the cell.\\n *   +  Draw centered lines vertically and horizontally the length of the cell.\\n *   X  Draw diagonal lines connecting opposite corners of the cell.\\n *   |  Draw a centered vertical line the length of the cell.\\n *   -  Draw a centered horizontal line the length of the cell.\\n *   \\\\  Draw a line connecting the top left corner of the cell to the bottom right corner.\\n *   /  Draw a line connecting the bottom left corner of teh cell to the top right corner.\\n *   #  Fill in the cell completely.\\n *\\n */\\n\\nimport { ERC721 } from \\\"./ERC721.sol\\\";\\n\\ncontract Yero is ERC721 {\\n\\n    uint public constant TOKEN_LIMIT = 8; // 8 for testing, 256 or 512 for prod;\\n\\n    uint public constant PRICE = 80 finney;\\n\\n    // The beneficiary is 350.org\\n    address public constant BENEFICIARY = 0x945A8480d61D85ED755013169dC165574d751D1a;\\n\\n    mapping (uint => address) private idToCreator;\\n    mapping (uint => uint8) private idToSymbolScheme;\\n\\n    /**\\n     * @dev A mapping from NFT ID to the seed used to make it.\\n     */\\n    mapping (uint256 => uint256) internal idToSeed;\\n    mapping (uint256 => uint256) internal seedToId;\\n\\n    mapping (uint256 => uint256) public tokenIdDefaultIndex;\\n    mapping (uint256 => uint256[]) public blockNumberSaved;\\n\\n    ///////////////////\\n    //// GENERATOR ////\\n    ///////////////////\\n\\n    int constant ONE = int(0x100000000);\\n    uint constant USIZE = 64;\\n    int constant SIZE = int(USIZE);\\n    int constant HALF_SIZE = SIZE / int(2);\\n\\n    int constant SCALE = int(0x1b81a81ab1a81a823);\\n    int constant HALF_SCALE = SCALE / int(2);\\n\\n    bytes prefix = \\\"data:text/plain;charset=utf-8,\\\";\\n\\n    // 0x2E = .\\n    // 0x4F = O\\n    // 0x2B = +\\n    // 0x58 = X\\n    // 0x7C = |\\n    // 0x2D = -\\n    // 0x5C = \\\\\\n    // 0x2F = /\\n    // 0x23 = #\\n\\n    function abs(int n) internal pure returns (int) {\\n        if (n >= 0) return n;\\n        return -n;\\n    }\\n\\n    function getScheme(uint a) internal pure returns (uint8) {\\n        uint index = a % 83;\\n        uint8 scheme;\\n        if (index < 20) {\\n            scheme = 1;\\n        } else if (index < 35) {\\n            scheme = 2;\\n        } else if (index < 48) {\\n            scheme = 3;\\n        } else if (index < 59) {\\n            scheme = 4;\\n        } else if (index < 68) {\\n            scheme = 5;\\n        } else if (index < 73) {\\n            scheme = 6;\\n        } else if (index < 77) {\\n            scheme = 7;\\n        } else if (index < 80) {\\n            scheme = 8;\\n        } else if (index < 82) {\\n            scheme = 9;\\n        } else {\\n            scheme = 10;\\n        }\\n        return scheme;\\n    }\\n\\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\\n\\n    // The following code generates art.\\n\\n        struct DrawingValues {\\n\\n            uint value;\\n            uint mod;\\n            bytes5 symbols;\\n        }\\n\\n    function draw(uint _id, uint _seed, uint _blockNumber) internal view returns (string) {\\n        uint a = uint(uint160(keccak256(abi.encodePacked(_seed, _blockNumber))));\\n        bytes memory output = new bytes(USIZE * (USIZE + 3) + 30);\\n        uint c;\\n        for (c = 0; c < 30; c++) {\\n            output[c] = prefix[c];\\n        }\\n\\n        DrawingValues memory drawingValues;\\n\\n        int x = 0;\\n        int y = 0;\\n        uint v = 0;\\n        drawingValues.value = 0;\\n        drawingValues.mod = (a % 11) + 5;\\n        drawingValues.symbols = getSymbol(_id);\\n\\n        for (int i = int(0); i < SIZE; i++) {\\n            y = (2 * (i - HALF_SIZE) + 1);\\n            if (a % 3 == 1) {\\n                y = -y;\\n            } else if (a % 3 == 2) {\\n                y = abs(y);\\n            }\\n            y = y * int(a);\\n            for (int j = int(0); j < SIZE; j++) {\\n                x = (2 * (j - HALF_SIZE) + 1);\\n                if (a % 2 == 1) {\\n                    x = abs(x);\\n                }\\n                x = x * int(a);\\n                v = uint(x * y / ONE) % drawingValues.mod;\\n                if (v < 5) {\\n                    drawingValues.value = uint(drawingValues.symbols[v]);\\n                } else {\\n                    drawingValues.value = 0x2E;\\n                }\\n                output[c] = byte(bytes32(drawingValues.value << 248));\\n                c++;\\n            }\\n            output[c] = byte(0x25);\\n            c++;\\n            output[c] = byte(0x30);\\n            c++;\\n            output[c] = byte(0x41);\\n            c++;\\n        }\\n        string memory result = string(output);\\n        return result;\\n    }\\n\\n    function getSymbol(uint id) public view returns (bytes5) {\\n        bytes5 symbols;\\n        uint8 symbolScheme = idToSymbolScheme[id];\\n\\n        if (symbolScheme == 0) {\\n            revert();\\n        } else if (symbolScheme == 1) {\\n            symbols = 0x2E582F5C2E; // X/\\\\\\n        } else if (symbolScheme == 2) {\\n            symbols = 0x2E2B2D7C2E; // +-|\\n        } else if (symbolScheme == 3) {\\n            symbols = 0x2E2F5C2E2E; // /\\\\\\n        } else if (symbolScheme == 4) {\\n            symbols = 0x2E5C7C2D2F; // \\\\|-/\\n        } else if (symbolScheme == 5) {\\n            symbols = 0x2E4F7C2D2E; // O|-\\n        } else if (symbolScheme == 6) {\\n            symbols = 0x2E5C5C2E2E; // \\\\\\n        } else if (symbolScheme == 7) {\\n            symbols = 0x2E237C2D2B; // #|-+\\n        } else if (symbolScheme == 8) {\\n            symbols = 0x2E4F4F2E2E; // OO\\n        } else if (symbolScheme == 9) {\\n            symbols = 0x2E232E2E2E; // #\\n        } else {\\n            symbols = 0x2E234F2E2E; // #O\\n        }\\n\\n        return symbols;\\n    }\\n\\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\\n\\n    function creator(uint _id) external view returns (address) {\\n        return idToCreator[_id];\\n    }\\n\\n    function symbolScheme(uint _id) external view returns (uint8) {\\n        return idToSymbolScheme[_id];\\n    }\\n\\n    function createGlyph(uint seed) external payable returns (uint256) {\\n        return _mint(msg.sender, seed);\\n    }\\n\\n    /**\\n     * @dev Mints a new NFT.\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * mint function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation.\\n     * @param _to The address that will own the minted NFT.\\n     */\\n    function _mint(address _to, uint seed) internal returns (uint256) {\\n        require(_to != address(0));\\n        require(numTokens < TOKEN_LIMIT, \\\"All token Minted\\\");\\n        require(msg.value >= PRICE, \\\"Payement too low\\\");\\n        require(seedToId[seed] == 0, \\\"Token already minted\\\");\\n        uint id = numTokens + 1;\\n\\n        idToCreator[id] = _to;\\n        idToSeed[id] = seed;\\n        seedToId[seed] = id;\\n        uint a = uint(uint160(keccak256(abi.encodePacked(seed))));\\n        idToSymbolScheme[id] = getScheme(a);\\n        blockNumberSaved[id].push(block.number);\\n        tokenIdDefaultIndex[id] = 0;\\n        emit Generated(id, _to, block.number);\\n\\n        numTokens = numTokens + 1;\\n        _addNFToken(_to, id);\\n\\n        BENEFICIARY.transfer(msg.value);\\n\\n        emit Transfer(address(0), _to, id);\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev A distinct URI (RFC 3986) for a given NFT.\\n     * @param _tokenId Id for which we want uri.\\n     * @return URI of _tokenId.\\n     */\\n    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\\n        uint256 _defaultIndex = tokenIdDefaultIndex[_tokenId]; \\n        uint256 _defaultBlockNumber = blockNumberSaved[_tokenId][_defaultIndex];\\n        uint256 _seed = idToSeed[_tokenId];\\n        return draw(_tokenId, _seed, _defaultBlockNumber);\\n    }\\n\\n    /**\\n     * @dev Save the token URI inside an array.\\n     * @param _tokenId Id for which we want uri.\\n     * @return URI of _tokenId.\\n     */\\n    function saveTokenURI(uint256 _tokenId) external validNFToken(_tokenId) {\\n        require(idToCreator[_tokenId] == msg.sender, \\\"Only owner can call\\\");\\n        blockNumberSaved[_tokenId].push(block.number);\\n    }\\n\\n    /**\\n     * @dev Set the default index for the tokenURI.\\n     * @param _tokenId Id for which we want uri.\\n     * @param _defaultIndex Index of tokenURI to set as default.\\n     */\\n    function setTokenIdDefaultIndex(uint256 _tokenId, uint256 _defaultIndex) external validNFToken(_tokenId) {\\n        require(idToCreator[_tokenId] == msg.sender, \\\"Only owner can call\\\");\\n\\n        tokenIdDefaultIndex[_tokenId] = _defaultIndex;\\n    }\\n\\n    /**\\n     * @dev View the current tokenURI for a given tokenId.\\n     * @param _tokenId Id for which we want the current uri.\\n     * @return URI of _tokenId.\\n     */\\n    function viewCurrentTokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\\n        uint256 _seed = idToSeed[_tokenId];\\n        return(draw(_tokenId, _seed, block.number));\\n    }\\n\\n    /**\\n     * @dev View a specific, already saved tokenURI.\\n     * @param _tokenId Id for which we want uri.\\n     * @param _index Index for which we want to see the tokenURI.\\n     * @return URI of _tokenId.\\n     */\\n    function viewSpecificTokenURI(uint256 _tokenId, uint256 _index) external view returns (string memory) {\\n        uint256 _seed = idToSeed[_tokenId];\\n        return draw(_tokenId, _seed, blockNumberSaved[_tokenId][_index]);\\n    }\\n\\n}\",\"keccak256\":\"0xc6ba35ddd5ed368899447aa4abfac29b41f6bdc639b323f4ea67628caca7c6b0\"},\"contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ninterface ERC721TokenReceiver\\r\\n{\\r\\n\\r\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\\r\\n\\r\\n}\",\"keccak256\":\"0xd89cf26554c6a36379c8bfe368118b92a0c43d31c3640b1e46da78682cf3617b\"}},\"version\":1}",
  "bytecode": "0x608060405260006006556040805190810160405280600481526020017f5965726f000000000000000000000000000000000000000000000000000000008152506007908051906020019062000056929190620002b1565b506040805190810160405280600381526020017fe1b5b9000000000000000000000000000000000000000000000000000000000081525060089080519060200190620000a4929190620002b1565b506040805190810160405280601e81526020017f646174613a746578742f706c61696e3b636861727365743d7574662d382c0000815250600f9080519060200190620000f292919062000338565b506001600560006301ffc9a77c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600560006380ac58cd7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff02191690831515021790555060016005600063780e9d637c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550600160056000635b5e139f7c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060006101000a81548160ff021916908315150217905550620003e7565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10620002f457805160ff191683800117855562000325565b8280016001018555821562000325579182015b828111156200032457825182559160200191906001019062000307565b5b509050620003349190620003bf565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200037b57805160ff1916838001178555620003ac565b82800160010185558215620003ac579182015b82811115620003ab5782518255916020019190600101906200038e565b5b509050620003bb9190620003bf565b5090565b620003e491905b80821115620003e0576000816000905550600101620003c6565b5090565b90565b61352080620003f76000396000f300608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461017a578063031bd4c4146101de57806306fdde0314610209578063081812fc14610299578063095ea7b31461030657806318160ddd1461035357806323b872dd1461037e5780632f745c59146103eb5780632f99c6cc1461044c578063309627af146104a357806339749064146104da57806342842e0e146105215780634f6ccce71461058e578063510b5158146105cf578063613496ac1461063c5780636352211e146106875780636418413c146106f457806367242bb11461077157806370a08231146107b257806375020395146108095780638d859f3e146108af57806395d89b41146108da578063a22cb4651461096a578063b4ad6962146109b9578063b88d4fde146109e6578063c87b56dd14610a6b578063d5d922d814610b11578063dba5a7f514610bc1578063e985e9c514610bf5575b600080fd5b34801561018657600080fd5b506101c460048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610c70565b604051808215151515815260200191505060405180910390f35b3480156101ea57600080fd5b506101f3610cd8565b6040518082815260200191505060405180910390f35b34801561021557600080fd5b5061021e610cdd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025e578082015181840152602081019050610243565b50505050905090810190601f16801561028b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a557600080fd5b506102c460048036038101908080359060200190929190505050610d7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031257600080fd5b50610351600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e2d565b005b34801561035f57600080fd5b506103686110c8565b6040518082815260200191505060405180910390f35b34801561038a57600080fd5b506103e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110d2565b005b3480156103f757600080fd5b50610436600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061136f565b6040518082815260200191505060405180910390f35b34801561045857600080fd5b50610461611420565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104af57600080fd5b506104d86004803603810190808035906020019092919080359060200190929190505050611438565b005b3480156104e657600080fd5b506105056004803603810190808035906020019092919050505061159b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561052d57600080fd5b5061058c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115c5565b005b34801561059a57600080fd5b506105b9600480360381019080803590602001909291905050506115e6565b6040518082815260200191505060405180910390f35b3480156105db57600080fd5b506105fa60048036038101908080359060200190929190505050611600565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064857600080fd5b50610671600480360381019080803590602001909291908035906020019092919050505061163d565b6040518082815260200191505060405180910390f35b34801561069357600080fd5b506106b26004803603810190808035906020019092919050505061166d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070057600080fd5b5061071f600480360381019080803590602001909291905050506116e6565b60405180827affffffffffffffffffffffffffffffffffffffffffffffffffffff19167affffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561077d57600080fd5b5061079c60048036038101908080359060200190929190505050611947565b6040518082815260200191505060405180910390f35b3480156107be57600080fd5b506107f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061195f565b6040518082815260200191505060405180910390f35b34801561081557600080fd5b50610834600480360381019080803590602001909291905050506119ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610874578082015181840152602081019050610859565b50505050905090810190601f1680156108a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108bb57600080fd5b506108c4611a4a565b6040518082815260200191505060405180910390f35b3480156108e657600080fd5b506108ef611a56565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561092f578082015181840152602081019050610914565b50505050905090810190601f16801561095c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561097657600080fd5b506109b7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611af8565b005b3480156109c557600080fd5b506109e460048036038101908080359060200190929190505050611bf8565b005b3480156109f257600080fd5b50610a69600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050611d7f565b005b348015610a7757600080fd5b50610a9660048036038101908080359060200190929190505050611dc4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ad6578082015181840152602081019050610abb565b50505050905090810190601f168015610b035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b1d57600080fd5b50610b466004803603810190808035906020019092919080359060200190929190505050611eaa565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b86578082015181840152602081019050610b6b565b50505050905090810190601f168015610bb35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610bdf60048036038101908080359060200190929190505050611f02565b6040518082815260200191505060405180910390f35b348015610c0157600080fd5b50610c56600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f15565b604051808215151515815260200191505060405180910390f35b600060056000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600881565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d755780601f10610d4a57610100808354040283529160200191610d75565b820191906000526020600020905b815481529060010190602001808311610d5857829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610df157600080fd5b6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f2757506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610f3257600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610fa257600080fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561101357600080fd5b856001600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000600654905090565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806111a557503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8061123557506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561124057600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156112b057600080fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151561132057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561135c57600080fd5b6113668686611fa8565b50505050505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015156113c157600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561140d57fe5b9060005260206000200154905092915050565b73945a8480d61d85ed755013169dc165574d751d1a81565b81600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156114a857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166009600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561157e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f6e6c79206f776e65722063616e2063616c6c0000000000000000000000000081525060200191505060405180910390fd5b81600d600085815260200190815260200160002081905550505050565b6000600a600083815260200190815260200160002060009054906101000a900460ff169050919050565b6115e1838383602060405190810160405280600081525061205d565b505050565b6000600654821015156115f857600080fd5b819050919050565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600e6020528160005260406000208181548110151561165857fe5b90600052602060002001600091509150505481565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116e157600080fd5b919050565b6000806000600a600085815260200190815260200160002060009054906101000a900460ff16905060008160ff16141561171f57600080fd5b60018160ff16141561175657642e582f5c2e7b0100000000000000000000000000000000000000000000000000000002915061193d565b60028160ff16141561178d57642e2b2d7c2e7b0100000000000000000000000000000000000000000000000000000002915061193c565b60038160ff1614156117c457642e2f5c2e2e7b0100000000000000000000000000000000000000000000000000000002915061193b565b60048160ff1614156117fb57642e5c7c2d2f7b0100000000000000000000000000000000000000000000000000000002915061193a565b60058160ff16141561183257642e4f7c2d2e7b01000000000000000000000000000000000000000000000000000000029150611939565b60068160ff16141561186957642e5c5c2e2e7b01000000000000000000000000000000000000000000000000000000029150611938565b60078160ff1614156118a057642e237c2d2b7b01000000000000000000000000000000000000000000000000000000029150611937565b60088160ff1614156118d757642e4f4f2e2e7b01000000000000000000000000000000000000000000000000000000029150611936565b60098160ff16141561190e57642e232e2e2e7b01000000000000000000000000000000000000000000000000000000029150611935565b642e234f2e2e7b010000000000000000000000000000000000000000000000000000000291505b5b5b5b5b5b5b5b5b8192505050919050565b600d6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561199c57600080fd5b6119a5826124fc565b9050919050565b6060600082600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a2057600080fd5b600b6000858152602001908152602001600020549150611a41848343612548565b92505050919050565b67011c37937e08000081565b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611aee5780601f10611ac357610100808354040283529160200191611aee565b820191906000526020600020905b815481529060010190602001808311611ad157829003601f168201915b5050505050905090565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611c6857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611d3e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f6e6c79206f776e65722063616e2063616c6c0000000000000000000000000081525060200191505060405180910390fd5b600e60008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b611dbd85858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061205d565b5050505050565b6060600080600084600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611e3b57600080fd5b600d6000878152602001908152602001600020549350600e600087815260200190815260200160002084815481101515611e7157fe5b90600052602060002001549250600b6000878152602001908152602001600020549150611e9f868385612548565b945050505050919050565b60606000600b6000858152602001908152602001600020549050611ef98482600e600088815260200190815260200160002086815481101515611ee957fe5b9060005260206000200154612548565b91505092915050565b6000611f0e3383612aa2565b9050919050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611fe982612f40565b611ff38183612fe3565b611ffd8383613219565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000808360006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061213157503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806121c157506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156121cc57600080fd5b85600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561223c57600080fd5b6002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415156122ac57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141515156122e857600080fd5b6122f28888611fa8565b6122fb88613364565b156124f1578773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156123f55780820151818401526020810190506123da565b50505050905090810190601f1680156124225780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561244457600080fd5b505af1158015612458573d6000803e3d6000fd5b505050506040513d602081101561246e57600080fd5b8101908080519060200190929190505050935063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156124f057600080fd5b5b505050505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600060606000612558613463565b600080600080600060608c8c60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156125bf578051825260208201915060208101905060208303925061259a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169950601e6003604001604002016040519080825280601f01601f1916602001820160405280156126455781602001602082028038833980820191505090505b509850600097505b601e88101561270657600f88815460018160011615610100020316600290048110151561267657fe5b8154600116156126955790600052602060002090602091828204019190065b9054901a7f01000000000000000000000000000000000000000000000000000000000000000289898151811015156126c957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505061264d565b60009550600094506000935060008760000181815250506005600b8b81151561272b57fe5b060187602001818152505061273f8e6116e6565b87604001907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600092505b6040831215612a8b576001600260408115156127a357fe5b058403600202019450600160038b8115156127ba57fe5b0614156127cc578460000394506127ee565b600260038b8115156127da57fe5b0614156127ed576127ea85613377565b94505b5b8985029450600091505b60408212156129405760016002604081151561281057fe5b058303600202019550600160028b81151561282757fe5b06141561283a5761283786613377565b95505b8986029550866020015164010000000086880281151561285657fe5b0581151561286057fe5b06935060058410156128d25786604001518460058110151561287e57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090048760000181815250506128de565b602e8760000181815250505b60f887600001519060020a0260010289898151811015156128fb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505081806001019250506127f8565b60257f010000000000000000000000000000000000000000000000000000000000000002898981518110151561297257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060307f01000000000000000000000000000000000000000000000000000000000000000289898151811015156129dc57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060417f0100000000000000000000000000000000000000000000000000000000000000028989815181101515612a4657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508780600101985050828060010193505061278b565b889050809a50505050505050505050509392505050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515612ae257600080fd5b6008600654101515612b5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f416c6c20746f6b656e204d696e7465640000000000000000000000000000000081525060200191505060405180910390fd5b67011c37937e0800003410151515612bdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f506179656d656e7420746f6f206c6f770000000000000000000000000000000081525060200191505060405180910390fd5b6000600c600086815260200190815260200160002054141515612c67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f546f6b656e20616c7265616479206d696e74656400000000000000000000000081525060200191505060405180910390fd5b6001600654019150846009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600b60008481526020019081526020016000208190555081600c60008681526020019081526020016000208190555083604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515612d465780518252602082019150602081019050602083039250612d21565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169050612d9881613396565b600a600084815260200190815260200160002060006101000a81548160ff021916908360ff160217905550600e60008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055506000600d6000848152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff16827f85dce40a3d477c839b8a58d43ecae72c5d41bfdfcf52fc3923c5aaba3e6483f1436040518082815260200191505060405180910390a3600160065401600681905550612e7e8583613219565b73945a8480d61d85ed755013169dc165574d751d1a73ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612ed8573d6000803e3d6000fd5b50818573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4439250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612fe0576001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b50565b60008060008473ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561305557600080fd5b6002600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600360008581526020019081526020016000205492506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003915082821415156131bf57600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561313e57fe5b9060005260206000200154905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561319857fe5b90600052602060002001819055508260036000838152602001908152602001600020819055505b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361321191906134a3565b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561328857600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150559050600181036003600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b6000808212151561338a57819050613391565b8160000390505b919050565b60008060006053848115156133a757fe5b06915060148210156133bc5760019050613459565b60238210156133ce5760029050613458565b60308210156133e05760039050613457565b603b8210156133f25760049050613456565b60448210156134045760059050613455565b60498210156134165760069050613454565b604d8210156134285760079050613453565b605082101561343a5760089050613452565b605282101561344c5760099050613451565b600a90505b5b5b5b5b5b5b5b5b8092505050919050565b606060405190810160405280600081526020016000815260200160007affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525090565b8154818355818111156134ca578183600052602060002091820191016134c991906134cf565b5b505050565b6134f191905b808211156134ed5760008160009055506001016134d5565b5090565b905600a165627a7a72305820e16668effc2998f5b33c06a36ed4452a830771eb48039ca70b04168c5405df980029",
  "deployedBytecode": "0x608060405260043610610175576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a71461017a578063031bd4c4146101de57806306fdde0314610209578063081812fc14610299578063095ea7b31461030657806318160ddd1461035357806323b872dd1461037e5780632f745c59146103eb5780632f99c6cc1461044c578063309627af146104a357806339749064146104da57806342842e0e146105215780634f6ccce71461058e578063510b5158146105cf578063613496ac1461063c5780636352211e146106875780636418413c146106f457806367242bb11461077157806370a08231146107b257806375020395146108095780638d859f3e146108af57806395d89b41146108da578063a22cb4651461096a578063b4ad6962146109b9578063b88d4fde146109e6578063c87b56dd14610a6b578063d5d922d814610b11578063dba5a7f514610bc1578063e985e9c514610bf5575b600080fd5b34801561018657600080fd5b506101c460048036038101908080357bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19169060200190929190505050610c70565b604051808215151515815260200191505060405180910390f35b3480156101ea57600080fd5b506101f3610cd8565b6040518082815260200191505060405180910390f35b34801561021557600080fd5b5061021e610cdd565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561025e578082015181840152602081019050610243565b50505050905090810190601f16801561028b5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102a557600080fd5b506102c460048036038101908080359060200190929190505050610d7f565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561031257600080fd5b50610351600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190505050610e2d565b005b34801561035f57600080fd5b506103686110c8565b6040518082815260200191505060405180910390f35b34801561038a57600080fd5b506103e9600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506110d2565b005b3480156103f757600080fd5b50610436600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061136f565b6040518082815260200191505060405180910390f35b34801561045857600080fd5b50610461611420565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104af57600080fd5b506104d86004803603810190808035906020019092919080359060200190929190505050611438565b005b3480156104e657600080fd5b506105056004803603810190808035906020019092919050505061159b565b604051808260ff1660ff16815260200191505060405180910390f35b34801561052d57600080fd5b5061058c600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291905050506115c5565b005b34801561059a57600080fd5b506105b9600480360381019080803590602001909291905050506115e6565b6040518082815260200191505060405180910390f35b3480156105db57600080fd5b506105fa60048036038101908080359060200190929190505050611600565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561064857600080fd5b50610671600480360381019080803590602001909291908035906020019092919050505061163d565b6040518082815260200191505060405180910390f35b34801561069357600080fd5b506106b26004803603810190808035906020019092919050505061166d565b604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561070057600080fd5b5061071f600480360381019080803590602001909291905050506116e6565b60405180827affffffffffffffffffffffffffffffffffffffffffffffffffffff19167affffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200191505060405180910390f35b34801561077d57600080fd5b5061079c60048036038101908080359060200190929190505050611947565b6040518082815260200191505060405180910390f35b3480156107be57600080fd5b506107f3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061195f565b6040518082815260200191505060405180910390f35b34801561081557600080fd5b50610834600480360381019080803590602001909291905050506119ac565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610874578082015181840152602081019050610859565b50505050905090810190601f1680156108a15780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156108bb57600080fd5b506108c4611a4a565b6040518082815260200191505060405180910390f35b3480156108e657600080fd5b506108ef611a56565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561092f578082015181840152602081019050610914565b50505050905090810190601f16801561095c5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561097657600080fd5b506109b7600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803515159060200190929190505050611af8565b005b3480156109c557600080fd5b506109e460048036038101908080359060200190929190505050611bf8565b005b3480156109f257600080fd5b50610a69600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919080359060200190929190803590602001908201803590602001919091929391929390505050611d7f565b005b348015610a7757600080fd5b50610a9660048036038101908080359060200190929190505050611dc4565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610ad6578082015181840152602081019050610abb565b50505050905090810190601f168015610b035780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b348015610b1d57600080fd5b50610b466004803603810190808035906020019092919080359060200190929190505050611eaa565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610b86578082015181840152602081019050610b6b565b50505050905090810190601f168015610bb35780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b610bdf60048036038101908080359060200190929190505050611f02565b6040518082815260200191505060405180910390f35b348015610c0157600080fd5b50610c56600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611f15565b604051808215151515815260200191505060405180910390f35b600060056000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b600881565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d755780601f10610d4a57610100808354040283529160200191610d75565b820191906000526020600020905b815481529060010190602001808311610d5857829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610df157600080fd5b6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610f2757506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610f3257600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610fa257600080fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561101357600080fd5b856001600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000600654905090565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614806111a557503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b8061123557506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b151561124057600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156112b057600080fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151561132057600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561135c57600080fd5b6113668686611fa8565b50505050505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015156113c157600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561140d57fe5b9060005260206000200154905092915050565b73945a8480d61d85ed755013169dc165574d751d1a81565b81600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156114a857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166009600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561157e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f6e6c79206f776e65722063616e2063616c6c0000000000000000000000000081525060200191505060405180910390fd5b81600d600085815260200190815260200160002081905550505050565b6000600a600083815260200190815260200160002060009054906101000a900460ff169050919050565b6115e1838383602060405190810160405280600081525061205d565b505050565b6000600654821015156115f857600080fd5b819050919050565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600e6020528160005260406000208181548110151561165857fe5b90600052602060002001600091509150505481565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141515156116e157600080fd5b919050565b6000806000600a600085815260200190815260200160002060009054906101000a900460ff16905060008160ff16141561171f57600080fd5b60018160ff16141561175657642e582f5c2e7b0100000000000000000000000000000000000000000000000000000002915061193d565b60028160ff16141561178d57642e2b2d7c2e7b0100000000000000000000000000000000000000000000000000000002915061193c565b60038160ff1614156117c457642e2f5c2e2e7b0100000000000000000000000000000000000000000000000000000002915061193b565b60048160ff1614156117fb57642e5c7c2d2f7b0100000000000000000000000000000000000000000000000000000002915061193a565b60058160ff16141561183257642e4f7c2d2e7b01000000000000000000000000000000000000000000000000000000029150611939565b60068160ff16141561186957642e5c5c2e2e7b01000000000000000000000000000000000000000000000000000000029150611938565b60078160ff1614156118a057642e237c2d2b7b01000000000000000000000000000000000000000000000000000000029150611937565b60088160ff1614156118d757642e4f4f2e2e7b01000000000000000000000000000000000000000000000000000000029150611936565b60098160ff16141561190e57642e232e2e2e7b01000000000000000000000000000000000000000000000000000000029150611935565b642e234f2e2e7b010000000000000000000000000000000000000000000000000000000291505b5b5b5b5b5b5b5b5b8192505050919050565b600d6020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415151561199c57600080fd5b6119a5826124fc565b9050919050565b6060600082600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611a2057600080fd5b600b6000858152602001908152602001600020549150611a41848343612548565b92505050919050565b67011c37937e08000081565b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611aee5780601f10611ac357610100808354040283529160200191611aee565b820191906000526020600020905b815481529060010190602001808311611ad157829003601f168201915b5050505050905090565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051808215151515815260200191505060405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611c6857600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611d3e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f4f6e6c79206f776e65722063616e2063616c6c0000000000000000000000000081525060200191505060405180910390fd5b600e60008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b611dbd85858585858080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505061205d565b5050505050565b6060600080600084600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611e3b57600080fd5b600d6000878152602001908152602001600020549350600e600087815260200190815260200160002084815481101515611e7157fe5b90600052602060002001549250600b6000878152602001908152602001600020549150611e9f868385612548565b945050505050919050565b60606000600b6000858152602001908152602001600020549050611ef98482600e600088815260200190815260200160002086815481101515611ee957fe5b9060005260206000200154612548565b91505092915050565b6000611f0e3383612aa2565b9050919050565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050611fe982612f40565b611ff38183612fe3565b611ffd8383613219565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000808360006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061213157503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806121c157506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156121cc57600080fd5b85600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561223c57600080fd5b6002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415156122ac57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff16141515156122e857600080fd5b6122f28888611fa8565b6122fb88613364565b156124f1578773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200183815260200180602001828103825283818151815260200191508051906020019080838360005b838110156123f55780820151818401526020810190506123da565b50505050905090810190601f1680156124225780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561244457600080fd5b505af1158015612458573d6000803e3d6000fd5b505050506040513d602081101561246e57600080fd5b8101908080519060200190929190505050935063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156124f057600080fd5b5b505050505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600060606000612558613463565b600080600080600060608c8c60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b6020831015156125bf578051825260208201915060208101905060208303925061259a565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169950601e6003604001604002016040519080825280601f01601f1916602001820160405280156126455781602001602082028038833980820191505090505b509850600097505b601e88101561270657600f88815460018160011615610100020316600290048110151561267657fe5b8154600116156126955790600052602060002090602091828204019190065b9054901a7f01000000000000000000000000000000000000000000000000000000000000000289898151811015156126c957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505061264d565b60009550600094506000935060008760000181815250506005600b8b81151561272b57fe5b060187602001818152505061273f8e6116e6565b87604001907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600092505b6040831215612a8b576001600260408115156127a357fe5b058403600202019450600160038b8115156127ba57fe5b0614156127cc578460000394506127ee565b600260038b8115156127da57fe5b0614156127ed576127ea85613377565b94505b5b8985029450600091505b60408212156129405760016002604081151561281057fe5b058303600202019550600160028b81151561282757fe5b06141561283a5761283786613377565b95505b8986029550866020015164010000000086880281151561285657fe5b0581151561286057fe5b06935060058410156128d25786604001518460058110151561287e57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090048760000181815250506128de565b602e8760000181815250505b60f887600001519060020a0260010289898151811015156128fb57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505081806001019250506127f8565b60257f010000000000000000000000000000000000000000000000000000000000000002898981518110151561297257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060307f01000000000000000000000000000000000000000000000000000000000000000289898151811015156129dc57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060417f0100000000000000000000000000000000000000000000000000000000000000028989815181101515612a4657fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508780600101985050828060010193505061278b565b889050809a50505050505050505050509392505050565b60008060008073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614151515612ae257600080fd5b6008600654101515612b5c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f416c6c20746f6b656e204d696e7465640000000000000000000000000000000081525060200191505060405180910390fd5b67011c37937e0800003410151515612bdc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f506179656d656e7420746f6f206c6f770000000000000000000000000000000081525060200191505060405180910390fd5b6000600c600086815260200190815260200160002054141515612c67576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f546f6b656e20616c7265616479206d696e74656400000000000000000000000081525060200191505060405180910390fd5b6001600654019150846009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600b60008481526020019081526020016000208190555081600c60008681526020019081526020016000208190555083604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515612d465780518252602082019150602081019050602083039250612d21565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169050612d9881613396565b600a600084815260200190815260200160002060006101000a81548160ff021916908360ff160217905550600e60008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055506000600d6000848152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff16827f85dce40a3d477c839b8a58d43ecae72c5d41bfdfcf52fc3923c5aaba3e6483f1436040518082815260200191505060405180910390a3600160065401600681905550612e7e8583613219565b73945a8480d61d85ed755013169dc165574d751d1a73ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612ed8573d6000803e3d6000fd5b50818573ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4439250505092915050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515612fe0576001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b50565b60008060008473ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561305557600080fd5b6002600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600360008581526020019081526020016000205492506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208054905003915082821415156131bf57600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208281548110151561313e57fe5b9060005260206000200154905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208481548110151561319857fe5b90600052602060002001819055508260036000838152602001908152602001600020819055505b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080548091906001900361321191906134a3565b505050505050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561328857600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150559050600181036003600084815260200190815260200160002081905550505050565b600080823b905060008111915050919050565b6000808212151561338a57819050613391565b8160000390505b919050565b60008060006053848115156133a757fe5b06915060148210156133bc5760019050613459565b60238210156133ce5760029050613458565b60308210156133e05760039050613457565b603b8210156133f25760049050613456565b60448210156134045760059050613455565b60498210156134165760069050613454565b604d8210156134285760079050613453565b605082101561343a5760089050613452565b605282101561344c5760099050613451565b600a90505b5b5b5b5b5b5b5b5b8092505050919050565b606060405190810160405280600081526020016000815260200160007affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525090565b8154818355818111156134ca578183600052602060002091820191016134c991906134cf565b5b505050565b6134f191905b808211156134ed5760008160009055506001016134d5565b5090565b905600a165627a7a72305820e16668effc2998f5b33c06a36ed4452a830771eb48039ca70b04168c5405df980029",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.\r",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.\r",
          "_tokenId": "ID of the token to be approved.\r"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r considered invalid, and this function throws for queries about the zero address.\r",
        "params": {
          "_owner": "Address for whom to query the balance.\r"
        },
        "return": "Balance of _owner.\r"
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.\r",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of.\r"
        },
        "return": "Address that _tokenId is approved for.\r"
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.\r",
        "params": {
          "_operator": "The address that acts on behalf of the owner.\r",
          "_owner": "The address that owns the NFTs.\r"
        },
        "return": "True if approved for all, false otherwise.\r"
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.\r",
        "return": "Representing name.\r"
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r invalid, and queries about them do throw.\r",
        "params": {
          "_tokenId": "The identifier for an NFT.\r"
        },
        "return": "Address of _tokenId owner.\r"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can\r be changed to payable.\r",
        "params": {
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can\r be changed to payable.\r",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.\r",
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "saveTokenURI(uint256)": {
        "details": "Save the token URI inside an array.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of\r `msg.sender`'s assets. It also emits the ApprovalForAll event.\r",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.\r",
          "_operator": "Address to add to the set of authorized operators.\r"
        }
      },
      "setTokenIdDefaultIndex(uint256,uint256)": {
        "details": "Set the default index for the tokenURI.",
        "params": {
          "_defaultIndex": "Index of tokenURI to set as default.",
          "_tokenId": "Id for which we want uri."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.\r",
        "params": {
          "_interfaceID": "Id of the interface.\r"
        },
        "return": "True if _interfaceID is supported, false otherwise.\r"
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.\r",
        "return": "Representing symbol.\r"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "returns the n-th NFT ID from a list of owner's tokens.\r",
        "params": {
          "_index": "Index number representing n-th token in owner's list of tokens.\r",
          "_owner": "Token owner's address.\r"
        },
        "return": "Token id.\r"
      },
      "tokenURI(uint256)": {
        "details": "A distinct URI (RFC 3986) for a given NFT.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\r",
        "params": {
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "viewCurrentTokenURI(uint256)": {
        "details": "View the current tokenURI for a given tokenId.",
        "params": {
          "_tokenId": "Id for which we want the current uri."
        },
        "return": "URI of _tokenId."
      },
      "viewSpecificTokenURI(uint256,uint256)": {
        "details": "View a specific, already saved tokenURI.",
        "params": {
          "_index": "Index for which we want to see the tokenURI.",
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is\r the current NFT owner, or an authorized operator of the current owner.\r"
      },
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT.\r"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this\r function just sets data to \"\"\r"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the\r approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r function checks if `_to` is a smart contract (code size > 0). If so, it calls\r `onERC721Received` on `_to` and throws if the return value is not\r `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time.\r"
      },
      "totalSupply()": {
        "notice": "/ Enumerable\r"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r they maybe be permanently lost.\r"
      }
    }
  }
}