{
  "address": "0x141344C017B63550aA73088A4F19601f79f37255",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceID",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "TOKEN_LIMIT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "name": "_name",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FOURTH_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_approved",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "seed",
          "type": "uint256"
        },
        {
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "createGlyphForCyber",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BENEFICIARY",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_defaultIndex",
          "type": "uint256"
        }
      ],
      "name": "setTokenIdDefaultIndex",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "symbolScheme",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "verifyPassword",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "creator",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        },
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "blockNumberSaved",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getSymbol",
      "outputs": [
        {
          "name": "",
          "type": "bytes5"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "tokenIdDefaultIndex",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CYBERDAO_LIMIT",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "viewCurrentTokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FIFTH_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "name": "_symbol",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "getPasswords",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_operator",
          "type": "address"
        },
        {
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "saveTokenURI",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "THIRD_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_passwords",
          "type": "string[]"
        }
      ],
      "name": "setPasswords",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "viewSpecificTokenURI",
      "outputs": [
        {
          "name": "",
          "type": "string"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "seed",
          "type": "uint256"
        },
        {
          "name": "_password",
          "type": "string"
        }
      ],
      "name": "createGlyph",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "totalBlockNumberSaved",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SECOND_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        },
        {
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CYBERDAO",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "FIRST_PRICE",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "index",
          "type": "uint256"
        },
        {
          "indexed": true,
          "name": "a",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Generated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_from",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_to",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_approved",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    }
  ],
  "transactionHash": "0x39bf20a7c30abf0294f7e8431a992a5a88c6203036f45c4c556701fa09722620",
  "receipt": {
    "to": null,
    "from": "0x4428161DBD37D935C64894525f91039E1a6E4a1e",
    "contractAddress": "0x141344C017B63550aA73088A4F19601f79f37255",
    "transactionIndex": 17,
    "gasUsed": "4258587",
    "logsBloom": "0x
    "blockHash": "0xfb89078f0de6a457c1ac2b329a97bf54073f9527a71f10b91d5bb13f2425e3f8",
    "transactionHash": "0x39bf20a7c30abf0294f7e8431a992a5a88c6203036f45c4c556701fa09722620",
    "logs": [],
    "blockNumber": 9774373,
    "cumulativeGasUsed": "5567197",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "8a8d0642e6aede5e4dd6beb067703eff",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.6ae8fb59\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceID\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"_name\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FOURTH_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_approved\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"createGlyphForCyber\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BENEFICIARY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_defaultIndex\",\"type\":\"uint256\"}],\"name\":\"setTokenIdDefaultIndex\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"symbolScheme\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"verifyPassword\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"creator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"},{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"blockNumberSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getSymbol\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes5\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tokenIdDefaultIndex\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CYBERDAO_LIMIT\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"viewCurrentTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIFTH_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"_symbol\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"getPasswords\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_operator\",\"type\":\"address\"},{\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"saveTokenURI\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"THIRD_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_passwords\",\"type\":\"string[]\"}],\"name\":\"setPasswords\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"viewSpecificTokenURI\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"seed\",\"type\":\"uint256\"},{\"name\":\"_password\",\"type\":\"string\"}],\"name\":\"createGlyph\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"totalBlockNumberSaved\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SECOND_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CYBERDAO\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"FIRST_PRICE\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"index\",\"type\":\"uint256\"},{\"indexed\":true,\"name\":\"a\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Generated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_to\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_approved\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"approve(address,uint256)\":{\"details\":\"Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\r\",\"params\":{\"_approved\":\"Address to be approved for the given NFT ID.\\r\",\"_tokenId\":\"ID of the token to be approved.\\r\"}},\"balanceOf(address)\":{\"details\":\"Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\r considered invalid, and this function throws for queries about the zero address.\\r\",\"params\":{\"_owner\":\"Address for whom to query the balance.\\r\"},\"return\":\"Balance of _owner.\\r\"},\"getApproved(uint256)\":{\"details\":\"Get the approved address for a single NFT.\\r\",\"params\":{\"_tokenId\":\"ID of the NFT to query the approval of.\\r\"},\"return\":\"Address that _tokenId is approved for.\\r\"},\"isApprovedForAll(address,address)\":{\"details\":\"Checks if `_operator` is an approved operator for `_owner`.\\r\",\"params\":{\"_operator\":\"The address that acts on behalf of the owner.\\r\",\"_owner\":\"The address that owns the NFTs.\\r\"},\"return\":\"True if approved for all, false otherwise.\\r\"},\"name()\":{\"details\":\"Returns a descriptive name for a collection of NFTokens.\\r\",\"return\":\"Representing name.\\r\"},\"ownerOf(uint256)\":{\"details\":\"Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\r invalid, and queries about them do throw.\\r\",\"params\":{\"_tokenId\":\"The identifier for an NFT.\\r\"},\"return\":\"Address of _tokenId owner.\\r\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can\\r be changed to payable.\\r\",\"params\":{\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Transfers the ownership of an NFT from one address to another address. This function can\\r be changed to payable.\\r\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`.\\r\",\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"saveTokenURI(uint256)\":{\"details\":\"Save the block.number inside an array.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\r `msg.sender`'s assets. It also emits the ApprovalForAll event.\\r\",\"params\":{\"_approved\":\"True if the operators is approved, false to revoke approval.\\r\",\"_operator\":\"Address to add to the set of authorized operators.\\r\"}},\"setTokenIdDefaultIndex(uint256,uint256)\":{\"details\":\"Set the default index for the tokenURI.\",\"params\":{\"_defaultIndex\":\"Index of block.number used to build the tokenURI to set as default.\",\"_tokenId\":\"Id for which we want uri.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Function to check which interfaces are suported by this contract.\\r\",\"params\":{\"_interfaceID\":\"Id of the interface.\\r\"},\"return\":\"True if _interfaceID is supported, false otherwise.\\r\"},\"symbol()\":{\"details\":\"Returns an abbreviated name for NFTokens.\\r\",\"return\":\"Representing symbol.\\r\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"returns the n-th NFT ID from a list of owner's tokens.\\r\",\"params\":{\"_index\":\"Index number representing n-th token in owner's list of tokens.\\r\",\"_owner\":\"Token owner's address.\\r\"},\"return\":\"Token id.\\r\"},\"tokenURI(uint256)\":{\"details\":\"A distinct URI (RFC 3986) for a given NFT.\",\"params\":{\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\r address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\r address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\r\",\"params\":{\"_from\":\"The current owner of the NFT.\\r\",\"_to\":\"The new owner.\\r\",\"_tokenId\":\"The NFT to transfer.\\r\"}},\"viewCurrentTokenURI(uint256)\":{\"details\":\"View the current tokenURI for a given tokenId at the current block.\",\"params\":{\"_tokenId\":\"Id for which we want the current uri.\"},\"return\":\"URI of _tokenId.\"},\"viewSpecificTokenURI(uint256,uint256)\":{\"details\":\"View a specific, already saved tokenURI.\",\"params\":{\"_index\":\"Index for which we want to see the tokenURI.\",\"_tokenId\":\"Id for which we want uri.\"},\"return\":\"URI of _tokenId.\"}}},\"userdoc\":{\"methods\":{\"approve(address,uint256)\":{\"notice\":\"The zero address indicates there is no approved address. Throws unless `msg.sender` is\\r the current NFT owner, or an authorized operator of the current owner.\\r\"},\"getApproved(uint256)\":{\"notice\":\"Throws if `_tokenId` is not a valid NFT.\\r\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"This works identically to the other function with an extra data parameter, except this\\r function just sets data to \\\"\\\"\\r\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Throws unless `msg.sender` is the current owner, an authorized operator, or the\\r approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\r the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\r function checks if `_to` is a smart contract (code size > 0). If so, it calls\\r `onERC721Received` on `_to` and throws if the return value is not\\r `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\r\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"This works even if sender doesn't own any tokens at the time.\\r\"},\"totalSupply()\":{\"notice\":\"/ Enumerable\\r\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\r they maybe be permanently lost.\\r\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/Yero.sol\":\"Yero\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/ERC721.sol\":{\"content\":\"// SPDX-Licenser-Identifier: MIT\\r\\npragma solidity ^0.4.24;\\r\\n\\r\\nimport \\\"./interfaces/ERC721TokenReceiver.sol\\\";\\r\\n\\r\\ncontract ERC721 {\\r\\n    \\r\\n    event Generated(uint indexed index, address indexed a, uint256 value);\\r\\n\\r\\n    /// @dev This emits when ownership of any NFT changes by any mechanism.\\r\\n    ///  This event emits when NFTs are created (`from` == 0) and destroyed\\r\\n    ///  (`to` == 0). Exception: during contract creation, any number of NFTs\\r\\n    ///  may be created and assigned without emitting Transfer. At the time of\\r\\n    ///  any transfer, the approved address for that NFT (if any) is reset to none.\\r\\n    event Transfer(address indexed _from, address indexed _to, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when the approved address for an NFT is changed or\\r\\n    ///  reaffirmed. The zero address indicates there is no approved address.\\r\\n    ///  When a Transfer event emits, this also indicates that the approved\\r\\n    ///  address for that NFT (if any) is reset to none.\\r\\n    event Approval(address indexed _owner, address indexed _approved, uint256 indexed _tokenId);\\r\\n\\r\\n    /// @dev This emits when an operator is enabled or disabled for an owner.\\r\\n    ///  The operator can manage all NFTs of the owner.\\r\\n    event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\r\\n\\r\\n    bytes4 internal constant MAGIC_ON_ERC721_RECEIVED = 0x150b7a02;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from owner address to mapping of operator addresses.\\r\\n     */\\r\\n    mapping (address => mapping (address => bool)) internal ownerToOperators;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from NFT ID to approved address.\\r\\n     */\\r\\n    mapping (uint256 => address) internal idToApproval;\\r\\n\\r\\n    /**\\r\\n     * @dev A mapping from NFT ID to the address that owns it.\\r\\n     */\\r\\n    mapping (uint256 => address) internal idToOwner;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from NFT ID to its index in the owner tokens list.\\r\\n     */\\r\\n    mapping(uint256 => uint256) internal idToOwnerIndex;\\r\\n\\r\\n    /**\\r\\n     * @dev Mapping from owner to list of owned NFT IDs.\\r\\n     */\\r\\n    mapping(address => uint256[]) internal ownerToIds;\\r\\n\\r\\n    // ERC 165\\r\\n    mapping(bytes4 => bool) internal supportedInterfaces;\\r\\n\\r\\n    /**\\r\\n     * @dev Total number of tokens.\\r\\n     */\\r\\n    uint internal numTokens = 0;\\r\\n\\r\\n    string internal nftName = \\\"Yero\\\";\\r\\n    string internal nftSymbol = \\\"\\u1d79\\\";\\r\\n\\r\\n    /**\\r\\n     * @dev Contract constructor.\\r\\n     */\\r\\n    constructor() public {\\r\\n        supportedInterfaces[0x01ffc9a7] = true; // ERC165\\r\\n        supportedInterfaces[0x80ac58cd] = true; // ERC721\\r\\n        supportedInterfaces[0x780e9d63] = true; // ERC721 Enumerable\\r\\n        supportedInterfaces[0x5b5e139f] = true; // ERC721 Metadata\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Guarantees that the msg.sender is an owner or operator of the given NFT.\\r\\n     * @param _tokenId ID of the NFT to validate.\\r\\n     */\\r\\n    modifier canOperate(uint256 _tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == msg.sender || ownerToOperators[tokenOwner][msg.sender]);\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Guarantees that the msg.sender is allowed to transfer NFT.\\r\\n     * @param _tokenId ID of the NFT to transfer.\\r\\n     */\\r\\n    modifier canTransfer(uint256 _tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(\\r\\n            tokenOwner == msg.sender\\r\\n            || idToApproval[_tokenId] == msg.sender\\r\\n            || ownerToOperators[tokenOwner][msg.sender]\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Guarantees that _tokenId is a valid Token.\\r\\n     * @param _tokenId ID of the NFT to validate.\\r\\n     */\\r\\n    modifier validNFToken(uint256 _tokenId) {\\r\\n        require(idToOwner[_tokenId] != address(0), \\\"Query for non-existant token\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Checks if `_operator` is an approved operator for `_owner`.\\r\\n     * @param _owner The address that owns the NFTs.\\r\\n     * @param _operator The address that acts on behalf of the owner.\\r\\n     * @return True if approved for all, false otherwise.\\r\\n     */\\r\\n    function isApprovedForAll(address _owner, address _operator) external view returns (bool) {\\r\\n        return ownerToOperators[_owner][_operator];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Enables or disables approval for a third party (\\\"operator\\\") to manage all of\\r\\n     * `msg.sender`'s assets. It also emits the ApprovalForAll event.\\r\\n     * @notice This works even if sender doesn't own any tokens at the time.\\r\\n     * @param _operator Address to add to the set of authorized operators.\\r\\n     * @param _approved True if the operators is approved, false to revoke approval.\\r\\n     */\\r\\n    function setApprovalForAll(address _operator, bool _approved) external {\\r\\n        ownerToOperators[msg.sender][_operator] = _approved;\\r\\n        emit ApprovalForAll(msg.sender, _operator, _approved);\\r\\n    }\\r\\n    \\r\\n      //////////////////////////\\r\\n     //// ERC 721 and 165  ////\\r\\n    //////////////////////////\\r\\n\\r\\n    /**\\r\\n     * @dev Function to check which interfaces are suported by this contract.\\r\\n     * @param _interfaceID Id of the interface.\\r\\n     * @return True if _interfaceID is supported, false otherwise.\\r\\n     */\\r\\n    function supportsInterface(bytes4 _interfaceID) external view returns (bool) {\\r\\n        return supportedInterfaces[_interfaceID];\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns whether the target address is a contract.\\r\\n     * @param _addr Address to check.\\r\\n     * @return True if _addr is a contract, false if not.\\r\\n     */\\r\\n    function isContract(address _addr) internal view returns (bool addressCheck) {\\r\\n        uint256 size;\\r\\n        assembly { size := extcodesize(_addr) } // solhint-disable-line\\r\\n        addressCheck = size > 0;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\r\\n     * be changed to payable.\\r\\n     * @notice Throws unless `msg.sender` is the current owner, an authorized operator, or the\\r\\n     * approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\\r\\n     * the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\\r\\n     * function checks if `_to` is a smart contract (code size > 0). If so, it calls\\r\\n     * `onERC721Received` on `_to` and throws if the return value is not\\r\\n     * `bytes4(keccak256(\\\"onERC721Received(address,uint256,bytes)\\\"))`.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external {\\r\\n        _safeTransferFrom(_from, _to, _tokenId, _data);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Transfers the ownership of an NFT from one address to another address. This function can\\r\\n     * be changed to payable.\\r\\n     * @notice This works identically to the other function with an extra data parameter, except this\\r\\n     * function just sets data to \\\"\\\"\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     */\\r\\n    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external {\\r\\n        _safeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\\r\\n     * address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\\r\\n     * address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\\r\\n     * @notice The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\\r\\n     * they maybe be permanently lost.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     */\\r\\n    function transferFrom(address _from, address _to, uint256 _tokenId) external canTransfer(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == _from);\\r\\n        require(_to != address(0));\\r\\n        _transfer(_to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Set or reaffirm the approved address for an NFT. This function can be changed to payable.\\r\\n     * @notice The zero address indicates there is no approved address. Throws unless `msg.sender` is\\r\\n     * the current NFT owner, or an authorized operator of the current owner.\\r\\n     * @param _approved Address to be approved for the given NFT ID.\\r\\n     * @param _tokenId ID of the token to be approved.\\r\\n     */\\r\\n    function approve(address _approved, uint256 _tokenId) external canOperate(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(_approved != tokenOwner);\\r\\n        idToApproval[_tokenId] = _approved;\\r\\n        emit Approval(tokenOwner, _approved, _tokenId);\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Actually perform the safeTransferFrom.\\r\\n     * @param _from The current owner of the NFT.\\r\\n     * @param _to The new owner.\\r\\n     * @param _tokenId The NFT to transfer.\\r\\n     * @param _data Additional data with no specified format, sent in call to `_to`.\\r\\n     */\\r\\n    function _safeTransferFrom(address _from,  address _to,  uint256 _tokenId,  bytes memory _data) private canTransfer(_tokenId) validNFToken(_tokenId) {\\r\\n        address tokenOwner = idToOwner[_tokenId];\\r\\n        require(tokenOwner == _from);\\r\\n        require(_to != address(0));\\r\\n\\r\\n        _transfer(_to, _tokenId);\\r\\n\\r\\n        if (isContract(_to)) {\\r\\n            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\\r\\n            require(retval == MAGIC_ON_ERC721_RECEIVED);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Actually preforms the transfer.\\r\\n     * @notice Does NO checks.\\r\\n     * @param _to Address of a new owner.\\r\\n     * @param _tokenId The NFT that is being transferred.\\r\\n     */\\r\\n    function _transfer(address _to, uint256 _tokenId) internal {\\r\\n        address from = idToOwner[_tokenId];\\r\\n        _clearApproval(_tokenId);\\r\\n\\r\\n        _removeNFToken(from, _tokenId);\\r\\n        _addNFToken(_to, _tokenId);\\r\\n\\r\\n        emit Transfer(from, _to, _tokenId);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Assigns a new NFT to an address.\\r\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\r\\n     * @param _to Address to which we want to add the NFT.\\r\\n     * @param _tokenId Which NFT we want to add.\\r\\n     */\\r\\n    function _addNFToken(address _to, uint256 _tokenId) internal {\\r\\n        require(idToOwner[_tokenId] == address(0));\\r\\n        idToOwner[_tokenId] = _to;\\r\\n\\r\\n        uint256 length = ownerToIds[_to].push(_tokenId);\\r\\n        idToOwnerIndex[_tokenId] = length - 1;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Removes a NFT from an address.\\r\\n     * @notice Use and override this function with caution. Wrong usage can have serious consequences.\\r\\n     * @param _from Address from wich we want to remove the NFT.\\r\\n     * @param _tokenId Which NFT we want to remove.\\r\\n     */\\r\\n    function _removeNFToken(address _from, uint256 _tokenId) internal {\\r\\n        require(idToOwner[_tokenId] == _from);\\r\\n        delete idToOwner[_tokenId];\\r\\n\\r\\n        uint256 tokenToRemoveIndex = idToOwnerIndex[_tokenId];\\r\\n        uint256 lastTokenIndex = ownerToIds[_from].length - 1;\\r\\n\\r\\n        if (lastTokenIndex != tokenToRemoveIndex) {\\r\\n            uint256 lastToken = ownerToIds[_from][lastTokenIndex];\\r\\n            ownerToIds[_from][tokenToRemoveIndex] = lastToken;\\r\\n            idToOwnerIndex[lastToken] = tokenToRemoveIndex;\\r\\n        }\\r\\n\\r\\n        ownerToIds[_from].length--;\\r\\n    }\\r\\n    \\r\\n    /**\\r\\n     * @dev Clears the current approval of a given NFT ID.\\r\\n     * @param _tokenId ID of the NFT to be transferred.\\r\\n     */\\r\\n    function _clearApproval(uint256 _tokenId) private {\\r\\n        if (idToApproval[_tokenId] != address(0)) {\\r\\n            delete idToApproval[_tokenId];\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Get the approved address for a single NFT.\\r\\n     * @notice Throws if `_tokenId` is not a valid NFT.\\r\\n     * @param _tokenId ID of the NFT to query the approval of.\\r\\n     * @return Address that _tokenId is approved for.\\r\\n     */\\r\\n    function getApproved(uint256 _tokenId) external view validNFToken(_tokenId) returns (address) {\\r\\n        return idToApproval[_tokenId];\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Helper function that gets NFT count of owner. This is needed for overriding in enumerable\\r\\n     * extension to remove double storage (gas optimization) of owner nft count.\\r\\n     * @param _owner Address for whom to query the count.\\r\\n     * @return Number of _owner NFTs.\\r\\n     */\\r\\n    function _getOwnerNFTCount(address _owner) internal view returns (uint256) {\\r\\n        return ownerToIds[_owner].length;\\r\\n    }\\r\\n\\r\\n    //// Enumerable\\r\\n\\r\\n    function totalSupply() public view returns (uint256) {\\r\\n        return numTokens;\\r\\n    }\\r\\n\\r\\n    function tokenByIndex(uint256 index) public view returns (uint256) {\\r\\n        require(index < numTokens);\\r\\n        return index;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev returns the n-th NFT ID from a list of owner's tokens.\\r\\n     * @param _owner Token owner's address.\\r\\n     * @param _index Index number representing n-th token in owner's list of tokens.\\r\\n     * @return Token id.\\r\\n     */\\r\\n    function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256) {\\r\\n        require(_index < ownerToIds[_owner].length);\\r\\n        return ownerToIds[_owner][_index];\\r\\n    }\\r\\n\\r\\n        /**\\r\\n     * @dev Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\\r\\n     * considered invalid, and this function throws for queries about the zero address.\\r\\n     * @param _owner Address for whom to query the balance.\\r\\n     * @return Balance of _owner.\\r\\n     */\\r\\n    function balanceOf(address _owner) external view returns (uint256) {\\r\\n        require(_owner != address(0));\\r\\n        return _getOwnerNFTCount(_owner);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\\r\\n     * invalid, and queries about them do throw.\\r\\n     * @param _tokenId The identifier for an NFT.\\r\\n     * @return Address of _tokenId owner.\\r\\n     */\\r\\n    function ownerOf(uint256 _tokenId) external view returns (address _owner) {\\r\\n        _owner = idToOwner[_tokenId];\\r\\n        require(_owner != address(0));\\r\\n    }\\r\\n    \\r\\n    //// Metadata\\r\\n\\r\\n    /**\\r\\n      * @dev Returns a descriptive name for a collection of NFTokens.\\r\\n      * @return Representing name.\\r\\n      */\\r\\n    function name() external view returns (string memory _name) {\\r\\n        _name = nftName;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev Returns an abbreviated name for NFTokens.\\r\\n     * @return Representing symbol.\\r\\n     */\\r\\n    function symbol() external view returns (string memory _symbol) {\\r\\n        _symbol = nftSymbol;\\r\\n    }\\r\\n}\",\"keccak256\":\"0x3eec93528af7377ea9ba03d4b7d7c9a7f29e3cb87f1de263ee776603d80e97f6\"},\"contracts/Yero.sol\":{\"content\":\"pragma solidity ^0.4.24;\\npragma experimental ABIEncoderV2;\\n\\n/**\\n *\\n *  ;.  ;.                           \\n *  ; | ; |          ||          .-.  \\n *  `.| `.| ....     ||  .---.  _|_ \\\\ \\n *  |   | `=.`''===.' '.___.' (_)  \\n *\\n * The following algorithm is amazing, and I would like to thank Matt Hall and John Watkinson for their astounding work\\n * The algorithm have been made for Autoglyphs and have been changed by dsi for Yero\\n *\\n * MODIFICATIONS\\n * Split the contract into multiple part like MainContract, ERC721 and ERC721Receiver.\\n * Add a dynamic variable `block.number` inside the `draw` function to make it more dynamic\\n * Split the `draw` function into two functions with `getSymbol` and add a struct to avoid Error: Stack Too Deep.\\n * Doesn't execute the `draw` function on minting and instead save the seed and the block.number to execute it on a view function (`tokenURI`)\\n * Add `saveTokenURI` to save block.number into an array linked to the tokenId\\n * Add `setTokenIdDefaultIndex` to change the default returned URI from the `tokenURI` function\\n * Add `viewCurrentTokenURI` to view the tokenURI at the current block\\n * Add `viewSpecificTokenURI` to view already saved tokenURI\\n *\\n *\\n * FUNCTIONNING\\n * The output of the 'tokenURI' function is a set of instructions to make a drawing.\\n * Each symbol in the output corresponds to a cell, and there are 64x64 cells arranged in a square grid.\\n * The drawing can be any size, and the pen's stroke width should be between 1/5th to 1/10th the size of a cell.\\n * The drawing instructions for the nine different symbols are as follows:\\n *\\n *   .  Draw nothing in the cell.\\n *   O  Draw a circle bounded by the cell.\\n *   +  Draw centered lines vertically and horizontally the length of the cell.\\n *   X  Draw diagonal lines connecting opposite corners of the cell.\\n *   |  Draw a centered vertical line the length of the cell.\\n *   -  Draw a centered horizontal line the length of the cell.\\n *   \\\\  Draw a line connecting the top left corner of the cell to the bottom right corner.\\n *   /  Draw a line connecting the bottom left corner of teh cell to the top right corner.\\n *   #  Fill in the cell completely.\\n *\\n */\\n\\nimport { ERC721 } from \\\"./ERC721.sol\\\";\\n\\ncontract Yero is ERC721 {\\n\\n    uint public constant TOKEN_LIMIT = 512; // 8 for testing, 256 or 512 for prod;\\n    uint public constant CYBERDAO_LIMIT = 15;\\n\\n    uint public constant FIRST_PRICE = 60606000000000000 wei; // 0.060606 ether\\n    uint public constant SECOND_PRICE = 90909000000000000 wei; // 0.090909 ether\\n    uint public constant THIRD_PRICE = 101010100000000000 wei; // 0.1010101 ether\\n    uint public constant FOURTH_PRICE = 121212100000000000 wei; // 0.1212121 ether\\n    uint public constant FIFTH_PRICE = 131313130000000000 wei; // 0.1313131 ether\\n\\n    // The beneficiary is 350.org\\n    address public constant BENEFICIARY = 0x945A8480d61D85ED755013169dC165574d751D1a;\\n    address public constant CYBERDAO = 0x90F79bf6EB2c4f870365E785982E1f101E93b906;\\n\\n    string internal constant TABLE_ENCODE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    mapping (uint => address) private idToCreator;\\n    mapping (uint => uint8) private idToSymbolScheme;\\n\\n    /**\\n     * @dev A mapping from NFT ID to the seed used to make it.\\n     */\\n    mapping (uint256 => uint256) internal idToSeed;\\n    mapping (uint256 => uint256) internal seedToId;\\n    mapping (uint256 => bool) internal isGenesis;\\n\\n    mapping (uint256 => uint256) public tokenIdDefaultIndex;\\n    mapping (uint256 => uint256[]) public blockNumberSaved;\\n\\n    mapping (string => bool) private passwords;\\n\\n    function getPasswords(string _password) public view returns(bool) {\\n        return passwords[_password];\\n    }\\n    mapping (string => bool) internal isPassFound;\\n\\n    address public owner;\\n\\n    constructor() public {\\n        owner = msg.sender;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(msg.sender == owner, \\\"Sender is not the Owner\\\");\\n        _;\\n    }\\n\\n    ///////////////////\\n    //// GENERATOR ////\\n    ///////////////////\\n\\n    int constant ONE = int(0x100000000);\\n    uint constant USIZE = 64;\\n    int constant SIZE = int(USIZE);\\n    int constant HALF_SIZE = SIZE / int(2);\\n\\n    int constant SCALE = int(0x1b81a81ab1a81a823);\\n    int constant HALF_SCALE = SCALE / int(2);\\n\\n    bytes prefix = \\\"data:text/plain;charset=utf-8,\\\";\\n\\n    // 0x2E = .\\n    // 0x4F = O\\n    // 0x2B = +\\n    // 0x58 = X\\n    // 0x7C = |\\n    // 0x2D = -\\n    // 0x5C = \\\\\\n    // 0x2F = /\\n    // 0x23 = #\\n\\n    function abs(int n) internal pure returns (int) {\\n        if (n >= 0) return n;\\n        return -n;\\n    }\\n\\n    function getScheme(uint a) internal pure returns (uint8) {\\n        uint index = a % 83;\\n        uint8 scheme;\\n        if (index < 20) {\\n            scheme = 1;\\n        } else if (index < 35) {\\n            scheme = 2;\\n        } else if (index < 48) {\\n            scheme = 3;\\n        } else if (index < 59) {\\n            scheme = 4;\\n        } else if (index < 68) {\\n            scheme = 5;\\n        } else if (index < 73) {\\n            scheme = 6;\\n        } else if (index < 77) {\\n            scheme = 7;\\n        } else if (index < 80) {\\n            scheme = 8;\\n        } else if (index < 82) {\\n            scheme = 9;\\n        } else {\\n            scheme = 10;\\n        }\\n        return scheme;\\n    }\\n\\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\\n\\n    // The following code generates art.\\n\\n    struct DrawingValues {\\n\\n        uint value;\\n        uint mod;\\n        bytes5 symbols;\\n    }\\n\\n    function draw(uint _id, uint _seed, uint _blockNumber) internal view returns (string) {\\n        uint a = uint(uint160(keccak256(abi.encodePacked(_seed, _blockNumber))));\\n        bytes memory output = new bytes(USIZE * (USIZE + 3) + 30);\\n        uint c;\\n        for (c = 0; c < 30; c++) {\\n            output[c] = prefix[c];\\n        }\\n\\n        DrawingValues memory drawingValues;\\n\\n        int x = 0;\\n        int y = 0;\\n        uint v = 0;\\n        drawingValues.value = 0;\\n        drawingValues.mod = (a % 11) + 5;\\n        drawingValues.symbols = getSymbol(_id);\\n\\n        for (int i = int(0); i < SIZE; i++) {\\n            y = (2 * (i - HALF_SIZE) + 1);\\n            if (a % 3 == 1) {\\n                y = -y;\\n            } else if (a % 3 == 2) {\\n                y = abs(y);\\n            }\\n            y = y * int(a);\\n            for (int j = int(0); j < SIZE; j++) {\\n                x = (2 * (j - HALF_SIZE) + 1);\\n                if (a % 2 == 1) {\\n                    x = abs(x);\\n                }\\n                x = x * int(a);\\n                v = uint(x * y / ONE) % drawingValues.mod;\\n                if (v < 5) {\\n                    drawingValues.value = uint(drawingValues.symbols[v]);\\n                } else {\\n                    drawingValues.value = 0x2E;\\n                }\\n                output[c] = byte(bytes32(drawingValues.value << 248));\\n                c++;\\n            }\\n            output[c] = byte(0x25);\\n            c++;\\n            output[c] = byte(0x30);\\n            c++;\\n            output[c] = byte(0x41);\\n            c++;\\n        }\\n        string memory result = string(output);\\n        return result;\\n    }\\n\\n    function getSymbol(uint id) public view returns (bytes5) {\\n        bytes5 symbols;\\n        uint8 symbolScheme = idToSymbolScheme[id];\\n\\n        if (symbolScheme == 0) {\\n            revert();\\n        } else if (symbolScheme == 1) {\\n            symbols = 0x2E582F5C2E; // X/\\\\\\n        } else if (symbolScheme == 2) {\\n            symbols = 0x2E2B2D7C2E; // +-|\\n        } else if (symbolScheme == 3) {\\n            symbols = 0x2E2F5C2E2E; // /\\\\\\n        } else if (symbolScheme == 4) {\\n            symbols = 0x2E5C7C2D2F; // \\\\|-/\\n        } else if (symbolScheme == 5) {\\n            symbols = 0x2E4F7C2D2E; // O|-\\n        } else if (symbolScheme == 6) {\\n            symbols = 0x2E5C5C2E2E; // \\\\\\n        } else if (symbolScheme == 7) {\\n            symbols = 0x2E237C2D2B; // #|-+\\n        } else if (symbolScheme == 8) {\\n            symbols = 0x2E4F4F2E2E; // OO\\n        } else if (symbolScheme == 9) {\\n            symbols = 0x2E232E2E2E; // #\\n        } else {\\n            symbols = 0x2E234F2E2E; // #O\\n        }\\n\\n        return symbols;\\n    }\\n\\n    /* * ** *** ***** ******** ************* ******** ***** *** ** * */\\n\\n    function creator(uint _id) external view returns (address) {\\n        return idToCreator[_id];\\n    }\\n\\n    function symbolScheme(uint _id) external view returns (uint8) {\\n        return idToSymbolScheme[_id];\\n    }\\n\\n    function createGlyph(uint seed, string _password) external payable returns (uint256) {\\n        require(numTokens < (TOKEN_LIMIT - CYBERDAO_LIMIT), \\\"All token Minted\\\");\\n        if(numTokens < 30) {\\n            require(msg.value >= FIRST_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens < 80) {\\n            require(msg.value >= SECOND_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens < 432) {\\n            require(msg.value >= THIRD_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens < 482) {\\n            require(msg.value >= FOURTH_PRICE, \\\"Payement too low\\\");\\n        } else if(numTokens < 512) {\\n            require(msg.value >= FIFTH_PRICE, \\\"Payement too low\\\");\\n        }\\n        return _mint(msg.sender, seed, _password);\\n    }\\n\\n    function createGlyphForCyber(uint seed, string _password) external payable returns (uint256) {\\n        require(numTokens < TOKEN_LIMIT, \\\"All token Minted\\\");\\n        return _mint(msg.sender, seed, _password);\\n    }\\n\\n    /**\\n     * @dev Mints a new NFT.\\n     * @notice This is an internal function which should be called from user-implemented external\\n     * mint function. Its purpose is to show and properly initialize data structures when using this\\n     * implementation.\\n     * @param _to The address that will own the minted NFT.\\n     */\\n    function _mint(address _to, uint seed, string memory _password) internal returns (uint256) {\\n        require(_to != address(0));\\n        require(seedToId[seed] == 0, \\\"Token already minted\\\");\\n        uint id = numTokens + 1;\\n\\n        idToCreator[id] = _to;\\n        idToSeed[id] = seed;\\n        seedToId[seed] = id;\\n        if(verifyPassword(_password)) {\\n            isGenesis[id] = true;\\n        }\\n        uint a = uint(uint160(keccak256(abi.encodePacked(seed))));\\n        idToSymbolScheme[id] = getScheme(a);\\n        blockNumberSaved[id].push(block.number);\\n        tokenIdDefaultIndex[id] = 0;\\n        emit Generated(id, _to, block.number);\\n\\n        numTokens = numTokens + 1;\\n        _addNFToken(_to, id);\\n\\n        BENEFICIARY.transfer(msg.value);\\n\\n        emit Transfer(address(0), _to, id);\\n        return block.number;\\n    }\\n\\n    /**\\n     * @dev A distinct URI (RFC 3986) for a given NFT.\\n     * @param _tokenId Id for which we want uri.\\n     * @return URI of _tokenId.\\n     */\\n    function tokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\\n        uint256 _defaultIndex = tokenIdDefaultIndex[_tokenId]; \\n        uint256 _defaultBlockNumber = blockNumberSaved[_tokenId][_defaultIndex];\\n        uint256 _seed = idToSeed[_tokenId];\\n        string memory imageURI = draw(_tokenId, _seed, _defaultBlockNumber);\\n        string memory genesis = isGenesis[_tokenId] ? \\\"true\\\" : \\\"false\\\";\\n        string memory json = encode(bytes(abi.encodePacked(\\n            '{\\\"name\\\": \\\"Yero\\\", ', \\n            '\\\"description\\\": \\\"Dynamic Generative Art\\\",', \\n            '\\\"attributes\\\": [{',\\n            '\\\"isGenesis\\\": \\\"',\\n            genesis,\\n            '\\\"}], \\\"image\\\": \\\"',\\n            imageURI,\\n            '\\\"}'\\n        )));\\n        string memory data = string(abi.encodePacked(\\\"data:application/json;base64,\\\", json));\\n        return data;\\n    }\\n\\n    /**\\n     * @dev Save the block.number inside an array.\\n     * @param _tokenId Id for which we want uri.\\n     */\\n    function saveTokenURI(uint256 _tokenId) external validNFToken(_tokenId) {\\n        require(idToCreator[_tokenId] == msg.sender, \\\"Only owner can call\\\");\\n        blockNumberSaved[_tokenId].push(block.number);\\n    }\\n\\n    /**\\n     * @dev Set the default index for the tokenURI.\\n     * @param _tokenId Id for which we want uri.\\n     * @param _defaultIndex Index of block.number used to build the tokenURI to set as default.\\n     */\\n    function setTokenIdDefaultIndex(uint256 _tokenId, uint256 _defaultIndex) external validNFToken(_tokenId) {\\n        require(idToCreator[_tokenId] == msg.sender, \\\"Only owner can call\\\");\\n\\n        tokenIdDefaultIndex[_tokenId] = _defaultIndex;\\n    }\\n\\n    /**\\n     * @dev View the current tokenURI for a given tokenId at the current block.\\n     * @param _tokenId Id for which we want the current uri.\\n     * @return URI of _tokenId.\\n     */\\n    function viewCurrentTokenURI(uint256 _tokenId) external view validNFToken(_tokenId) returns (string memory) {\\n        uint256 _seed = idToSeed[_tokenId];\\n        return(draw(_tokenId, _seed, block.number));\\n    }\\n\\n    /**\\n     * @dev View a specific, already saved tokenURI.\\n     * @param _tokenId Id for which we want uri.\\n     * @param _index Index for which we want to see the tokenURI.\\n     * @return URI of _tokenId.\\n     */\\n    function viewSpecificTokenURI(uint256 _tokenId, uint256 _index) external view returns (string memory) {\\n        uint256 _seed = idToSeed[_tokenId];\\n        return(draw(_tokenId, _seed, blockNumberSaved[_tokenId][_index]));\\n    }\\n\\n    function totalBlockNumberSaved(uint256 _tokenId) external view returns(uint256) {\\n        return(blockNumberSaved[_tokenId].length);\\n    }\\n\\n    function setPasswords(string[] memory _passwords) public onlyOwner {\\n        for(uint i = 0; i < _passwords.length; i++) {\\n            passwords[_passwords[i]] = true;\\n        }\\n    }\\n\\n    function verifyPassword(string memory _password) public returns(bool) {\\n        if(passwords[_password] && !isPassFound[_password]) {\\n            isPassFound[_password] = true;\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n}\",\"keccak256\":\"0xa5c1aa98bdeec916a9e41febc28be163e8677317d91925adbf2d0143ffd92abc\"},\"contracts/interfaces/ERC721TokenReceiver.sol\":{\"content\":\"pragma solidity ^0.4.24;\\r\\n\\r\\ninterface ERC721TokenReceiver\\r\\n{\\r\\n\\r\\n    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns(bytes4);\\r\\n\\r\\n}\",\"keccak256\":\"0xd89cf26554c6a36379c8bfe368118b92a0c43d31c3640b1e46da78682cf3617b\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101f9576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301ffc9a7146101fe578063031bd4c41461023b57806306fdde0314610266578063081812fc146102915780630838c22b146102ce578063095ea7b3146102f957806318160ddd1461032257806318d193f51461034d57806323b872dd1461037d5780632f745c59146103a65780632f99c6cc146103e3578063309627af1461040e578063397490641461043757806342842e0e1461047457806343589db81461049d5780634f6ccce7146104da578063510b515814610517578063613496ac146105545780636352211e146105915780636418413c146105ce57806367242bb11461060b5780636d5fd46b1461064857806370a082311461067357806375020395146106b05780638da5cb5b146106ed57806394e2021f1461071857806395d89b411461074357806398f9c7c51461076e578063a22cb465146107ab578063b4ad6962146107d4578063b88d4fde146107fd578063c87b56dd14610826578063c951c9f914610863578063d5d6ecda1461088e578063d5d922d8146108b7578063de7fe7e1146108f4578063e6239fac14610924578063e6a8375714610961578063e985e9c51461098c578063f16bd0ad146109c9578063fac68e93146109f4575b600080fd5b34801561020a57600080fd5b50610225600480360361022091908101906141b8565b610a1f565b6040516102329190614570565b60405180910390f35b34801561024757600080fd5b50610250610a87565b60405161025d9190614688565b60405180910390f35b34801561027257600080fd5b5061027b610a8d565b60405161028891906145a6565b60405180910390f35b34801561029d57600080fd5b506102b860048036036102b3919081019061424b565b610b2f565b6040516102c59190614509565b60405180910390f35b3480156102da57600080fd5b506102e3610c13565b6040516102f09190614688565b60405180910390f35b34801561030557600080fd5b50610320600480360361031b919081019061413b565b610c1f565b005b34801561032e57600080fd5b50610337610ef0565b6040516103449190614688565b60405180910390f35b61036760048036036103629190810190614274565b610efa565b6040516103749190614688565b60405180910390f35b34801561038957600080fd5b506103a4600480360361039f9190810190614030565b610f8a565b005b3480156103b257600080fd5b506103cd60048036036103c8919081019061413b565b61125d565b6040516103da9190614688565b60405180910390f35b3480156103ef57600080fd5b506103f861130e565b6040516104059190614509565b60405180910390f35b34801561041a57600080fd5b50610435600480360361043091908101906142cc565b611326565b005b34801561044357600080fd5b5061045e6004803603610459919081019061424b565b61148c565b60405161046b91906146a3565b60405180910390f35b34801561048057600080fd5b5061049b60048036036104969190810190614030565b6114b6565b005b3480156104a957600080fd5b506104c460048036036104bf919081019061420a565b6114d7565b6040516104d19190614570565b60405180910390f35b3480156104e657600080fd5b5061050160048036036104fc919081019061424b565b611670565b60405161050e9190614688565b60405180910390f35b34801561052357600080fd5b5061053e6004803603610539919081019061424b565b61168a565b60405161054b9190614509565b60405180910390f35b34801561056057600080fd5b5061057b600480360361057691908101906142cc565b6116c7565b6040516105889190614688565b60405180910390f35b34801561059d57600080fd5b506105b860048036036105b3919081019061424b565b6116f7565b6040516105c59190614509565b60405180910390f35b3480156105da57600080fd5b506105f560048036036105f0919081019061424b565b611770565b604051610602919061458b565b60405180910390f35b34801561061757600080fd5b50610632600480360361062d919081019061424b565b6119d1565b60405161063f9190614688565b60405180910390f35b34801561065457600080fd5b5061065d6119e9565b60405161066a9190614688565b60405180910390f35b34801561067f57600080fd5b5061069a60048036036106959190810190613fcb565b6119ee565b6040516106a79190614688565b60405180910390f35b3480156106bc57600080fd5b506106d760048036036106d2919081019061424b565b611a3b565b6040516106e491906145a6565b60405180910390f35b3480156106f957600080fd5b50610702611b0f565b60405161070f9190614509565b60405180910390f35b34801561072457600080fd5b5061072d611b35565b60405161073a9190614688565b60405180910390f35b34801561074f57600080fd5b50610758611b41565b60405161076591906145a6565b60405180910390f35b34801561077a57600080fd5b506107956004803603610790919081019061420a565b611be3565b6040516107a29190614570565b60405180910390f35b3480156107b757600080fd5b506107d260048036036107cd91908101906140ff565b611c65565b005b3480156107e057600080fd5b506107fb60048036036107f6919081019061424b565b611d61565b005b34801561080957600080fd5b50610824600480360361081f919081019061407f565b611eeb565b005b34801561083257600080fd5b5061084d6004803603610848919081019061424b565b611f30565b60405161085a91906145a6565b60405180910390f35b34801561086f57600080fd5b5061087861236b565b6040516108859190614688565b60405180910390f35b34801561089a57600080fd5b506108b560048036036108b09190810190614177565b612377565b005b3480156108c357600080fd5b506108de60048036036108d991908101906142cc565b6124c5565b6040516108eb91906145a6565b60405180910390f35b61090e60048036036109099190810190614274565b61251d565b60405161091b9190614688565b60405180910390f35b34801561093057600080fd5b5061094b6004803603610946919081019061424b565b612783565b6040516109589190614688565b60405180910390f35b34801561096d57600080fd5b506109766127a3565b6040516109839190614688565b60405180910390f35b34801561099857600080fd5b506109b360048036036109ae9190810190613ff4565b6127af565b6040516109c09190614570565b60405180910390f35b3480156109d557600080fd5b506109de612842565b6040516109eb9190614509565b60405180910390f35b348015610a0057600080fd5b50610a0961285a565b604051610a169190614688565b60405180910390f35b600060056000837bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19167bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916815260200190815260200160002060009054906101000a900460ff169050919050565b61020081565b606060078054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610b255780601f10610afa57610100808354040283529160200191610b25565b820191906000526020600020905b815481529060010190602001808311610b0857829003601f168201915b5050505050905090565b600081600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bce90614628565b60405180910390fd5b6001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16915050919050565b6701aea1c342faa80081565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480610d1957506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515610d2457600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515610dca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dc190614628565b60405180910390fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614151515610e3b57600080fd5b856001600087815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550848673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a4505050505050565b6000600654905090565b6000610200600654101515610f44576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f3b906145c8565b60405180910390fd5b610f81338585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612865565b90509392505050565b60008160006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16148061105d57503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b806110ed57506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b15156110f857600080fd5b83600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561119e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119590614628565b60405180910390fd5b6002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1693508673ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614151561120e57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff161415151561124a57600080fd5b6112548686612c12565b50505050505050565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002080549050821015156112af57600080fd5b600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020828154811015156112fb57fe5b9060005260206000200154905092915050565b73945a8480d61d85ed755013169dc165574d751d1a81565b81600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515156113cc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113c390614628565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166009600085815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561146f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146690614608565b60405180910390fd5b81600e600085815260200190815260200160002081905550505050565b6000600a600083815260200190815260200160002060009054906101000a900460ff169050919050565b6114d28383836020604051908101604052806000815250612cc7565b505050565b60006010826040518082805190602001908083835b60208310151561151157805182526020820191506020810190506020830392506114ec565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff1680156115d457506011826040518082805190602001908083835b602083101515611591578051825260208201915060208101905060208303925061156c565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff16155b156116665760016011836040518082805190602001908083835b60208310151561161357805182526020820191506020810190506020830392506115ee565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055506001905061166b565b600090505b919050565b60006006548210151561168257600080fd5b819050919050565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b600f602052816000526040600020818154811015156116e257fe5b90600052602060002001600091509150505481565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415151561176b57600080fd5b919050565b6000806000600a600085815260200190815260200160002060009054906101000a900460ff16905060008160ff1614156117a957600080fd5b60018160ff1614156117e057642e582f5c2e7b010000000000000000000000000000000000000000000000000000000291506119c7565b60028160ff16141561181757642e2b2d7c2e7b010000000000000000000000000000000000000000000000000000000291506119c6565b60038160ff16141561184e57642e2f5c2e2e7b010000000000000000000000000000000000000000000000000000000291506119c5565b60048160ff16141561188557642e5c7c2d2f7b010000000000000000000000000000000000000000000000000000000291506119c4565b60058160ff1614156118bc57642e4f7c2d2e7b010000000000000000000000000000000000000000000000000000000291506119c3565b60068160ff1614156118f357642e5c5c2e2e7b010000000000000000000000000000000000000000000000000000000291506119c2565b60078160ff16141561192a57642e237c2d2b7b010000000000000000000000000000000000000000000000000000000291506119c1565b60088160ff16141561196157642e4f4f2e2e7b010000000000000000000000000000000000000000000000000000000291506119c0565b60098160ff16141561199857642e232e2e2e7b010000000000000000000000000000000000000000000000000000000291506119bf565b642e234f2e2e7b010000000000000000000000000000000000000000000000000000000291505b5b5b5b5b5b5b5b5b8192505050919050565b600e6020528060005260406000206000915090505481565b600f81565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614151515611a2b57600080fd5b611a34826130ca565b9050919050565b6060600082600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611ae5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611adc90614628565b60405180910390fd5b600b6000858152602001908152602001600020549150611b06848343613116565b92505050919050565b601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6701d2849893fea40081565b606060088054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611bd95780601f10611bae57610100808354040283529160200191611bd9565b820191906000526020600020905b815481529060010190602001808311611bbc57829003601f168201915b5050505050905090565b60006010826040518082805190602001908083835b602083101515611c1d5780518252602082019150602081019050602083039250611bf8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060009054906101000a900460ff169050919050565b806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611d559190614570565b60405180910390a35050565b80600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfe90614628565b60405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166009600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515611eaa576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ea190614608565b60405180910390fd5b600f60008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055505050565b611f2985858585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612cc7565b5050505050565b6060600080600060608060608088600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515611fe3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fda90614628565b60405180910390fd5b600e60008b8152602001908152602001600020549750600f60008b81526020019081526020016000208881548110151561201957fe5b90600052602060002001549650600b60008b81526020019081526020016000205495506120478a8789613116565b9450600d60008b815260200190815260200160002060009054906101000a900460ff166120a9576040805190810160405280600581526020017f66616c73650000000000000000000000000000000000000000000000000000008152506120e0565b6040805190810160405280600481526020017f74727565000000000000000000000000000000000000000000000000000000008152505b93506122c2848660405160200180807f7b226e616d65223a20225965726f222c20000000000000000000000000000000815250601101807f226465736372697074696f6e223a202244796e616d69632047656e657261746981526020017f766520417274222c000000000000000000000000000000000000000000000000815250602801807f2261747472696275746573223a205b7b00000000000000000000000000000000815250601001807f22697347656e65736973223a2022000000000000000000000000000000000000815250600e0183805190602001908083835b6020831015156121e557805182526020820191506020810190506020830392506121c0565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d5d2c2022696d616765223a20220000000000000000000000000000000000815250600f0182805190602001908083835b602083101515612260578051825260208201915060208101905060208303925061223b565b6001836020036101000a038019825116818451168082178552505050505050905001807f227d00000000000000000000000000000000000000000000000000000000000081525060020192505050604051602081830303815290604052613670565b92508260405160200180807f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c000000815250601d0182805190602001908083835b6020831015156123255780518252602082019150602081019050602083039250612300565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405160208183030381529060405291508198505050505050505050919050565b670166dc26993a080081565b6000601260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561240b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161240290614648565b60405180910390fd5b600090505b81518110156124c15760016010838381518110151561242b57fe5b906020019060200201516040518082805190602001908083835b60208310151561246a5780518252602082019150602081019050602083039250612445565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060006101000a81548160ff0219169083151502179055508080600101915050612410565b5050565b60606000600b60008581526020019081526020016000205490506125148482600f60008881526020019081526020016000208681548110151561250457fe5b9060005260206000200154613116565b91505092915050565b6000600f6102000360065410151561256a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612561906145c8565b60405180910390fd5b601e60065410156125c65766d750d5fd41e00034101515156125c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125b890614668565b60405180910390fd5b61273d565b6050600654101561262357670142f940fbe2d000341015151561261e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261590614668565b60405180910390fd5b61273c565b6101b0600654101561268157670166dc26993a0800341015151561267c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267390614668565b60405180910390fd5b61273b565b6101e260065410156126df576701aea1c342faa80034101515156126da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126d190614668565b60405180910390fd5b61273a565b6102006006541015612739576701d2849893fea4003410151515612738576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272f90614668565b60405180910390fd5b5b5b5b5b5b61277a338585858080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050612865565b90509392505050565b6000600f6000838152602001908152602001600020805490509050919050565b670142f940fbe2d00081565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7390f79bf6eb2c4f870365e785982e1f101e93b90681565b66d750d5fd41e00081565b60008060008073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16141515156128a557600080fd5b6000600c6000878152602001908152602001600020541415156128fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016128f4906145e8565b60405180910390fd5b6001600654019150856009600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084600b60008481526020019081526020016000208190555081600c600087815260200190815260200160002081905550612990846114d7565b156129c2576001600d600084815260200190815260200160002060006101000a81548160ff0219169083151502179055505b84604051602001808281526020019150506040516020818303038152906040526040518082805190602001908083835b602083101515612a1757805182526020820191506020810190506020830392506129f2565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169050612a69816137f9565b600a600084815260200190815260200160002060006101000a81548160ff021916908360ff160217905550600f60008381526020019081526020016000204390806001815401808255809150509060018203906000526020600020016000909192909190915055506000600e6000848152602001908152602001600020819055508573ffffffffffffffffffffffffffffffffffffffff16827f85dce40a3d477c839b8a58d43ecae72c5d41bfdfcf52fc3923c5aaba3e6483f143604051612b319190614688565b60405180910390a3600160065401600681905550612b4f86836138c6565b73945a8480d61d85ed755013169dc165574d751d1a73ffffffffffffffffffffffffffffffffffffffff166108fc349081150290604051600060405180830381858888f19350505050158015612ba9573d6000803e3d6000fd5b50818673ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a443925050509392505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612c5382613a11565b612c5d8183613ab4565b612c6783836138c6565b818373ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b6000808360006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161480612d9b57503373ffffffffffffffffffffffffffffffffffffffff166001600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16145b80612e2b57506000808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff165b1515612e3657600080fd5b85600073ffffffffffffffffffffffffffffffffffffffff166002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151515612edc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ed390614628565b60405180910390fd5b6002600088815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1694508873ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff16141515612f4c57600080fd5b600073ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff1614151515612f8857600080fd5b612f928888612c12565b612f9b88613cea565b156130bf578773ffffffffffffffffffffffffffffffffffffffff1663150b7a02338b8a8a6040518563ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401612ffb9493929190614524565b602060405180830381600087803b15801561301557600080fd5b505af1158015613029573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061304d91908101906141e1565b935063150b7a027c0100000000000000000000000000000000000000000000000000000000027bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916847bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19161415156130be57600080fd5b5b505050505050505050565b6000600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6060600060606000613126613d1c565b600080600080600060608c8c60405160200180838152602001828152602001925050506040516020818303038152906040526040518082805190602001908083835b60208310151561318d5780518252602082019150602081019050602083039250613168565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206001900473ffffffffffffffffffffffffffffffffffffffff169950601e6003604001604002016040519080825280601f01601f1916602001820160405280156132135781602001602082028038833980820191505090505b509850600097505b601e8810156132d457601388815460018160011615610100020316600290048110151561324457fe5b8154600116156132635790600052602060002090602091828204019190065b9054901a7f010000000000000000000000000000000000000000000000000000000000000002898981518110151561329757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505061321b565b60009550600094506000935060008760000181815250506005600b8b8115156132f957fe5b060187602001818152505061330d8e611770565b87604001907affffffffffffffffffffffffffffffffffffffffffffffffffffff191690817affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525050600092505b60408312156136595760016002604081151561337157fe5b058403600202019450600160038b81151561338857fe5b06141561339a578460000394506133bc565b600260038b8115156133a857fe5b0614156133bb576133b885613cfd565b94505b5b8985029450600091505b604082121561350e576001600260408115156133de57fe5b058303600202019550600160028b8115156133f557fe5b0614156134085761340586613cfd565b95505b8986029550866020015164010000000086880281151561342457fe5b0581151561342e57fe5b06935060058410156134a05786604001518460058110151561344c57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090048760000181815250506134ac565b602e8760000181815250505b60f887600001519060020a0260010289898151811015156134c957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505081806001019250506133c6565b60257f010000000000000000000000000000000000000000000000000000000000000002898981518110151561354057fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060307f01000000000000000000000000000000000000000000000000000000000000000289898151811015156135aa57fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350878060010198505060417f010000000000000000000000000000000000000000000000000000000000000002898981518110151561361457fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535087806001019850508280600101935050613359565b889050809a50505050505050505050509392505050565b6060806000606060008551141561369957602060405190810160405280600081525093506137f1565b606060405190810160405280604081526020017f4142434445464748494a4b4c4d4e4f505152535455565758595a61626364656681526020017f6768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2f81525092506003600286510181151561370857fe5b046004029150602082016040519080825280601f01601f1916602001820160405280156137445781602001602082028038833980820191505090505b509050818152600183018586518101602084015b818310156137b3576003830192508251603f8160121c168501518253600182019150603f81600c1c168501518253600182019150603f8160061c168501518253600182019150603f8116850151825360018201915050613758565b6003895106600181146137cd57600281146137dd576137e8565b613d3d60f01b60028303526137e8565b603d60f81b60018303525b50505050508093505b505050919050565b600080600060538481151561380a57fe5b069150601482101561381f57600190506138bc565b602382101561383157600290506138bb565b603082101561384357600390506138ba565b603b82101561385557600490506138b9565b604482101561386757600590506138b8565b604982101561387957600690506138b7565b604d82101561388b57600790506138b6565b605082101561389d57600890506138b5565b60528210156138af57600990506138b4565b600a90505b5b5b5b5b5b5b5b5b8092505050919050565b60008073ffffffffffffffffffffffffffffffffffffffff166002600084815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561393557600080fd5b826002600084815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082908060018154018082558091505090600182039060005260206000200160009091929091909150559050600181036003600084815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff166001600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613ab1576001600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b50565b60008060008473ffffffffffffffffffffffffffffffffffffffff166002600086815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515613b2657600080fd5b6002600085815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600360008581526020019081526020016000205492506001600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490500391508282141515613c9057600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481101515613c0f57fe5b9060005260206000200154905080600460008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002084815481101515613c6957fe5b90600052602060002001819055508260036000838152602001908152602001600020819055505b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480919060019003613ce29190613d5c565b505050505050565b600080823b905060008111915050919050565b60008082121515613d1057819050613d17565b8160000390505b919050565b606060405190810160405280600081526020016000815260200160007affffffffffffffffffffffffffffffffffffffffffffffffffffff191681525090565b815481835581811115613d8357818360005260206000209182019101613d829190613d88565b5b505050565b613daa91905b80821115613da6576000816000905550600101613d8e565b5090565b90565b6000613db982356147f0565b905092915050565b600082601f8301121515613dd457600080fd5b8135613de7613de2826146eb565b6146be565b9150818183526020840193506020810190508360005b83811015613e2d5781358601613e138882613f0b565b845260208401935060208301925050600181019050613dfd565b5050505092915050565b6000613e438235614810565b905092915050565b6000613e57823561481c565b905092915050565b6000613e6b825161481c565b905092915050565b60008083601f8401121515613e8757600080fd5b8235905067ffffffffffffffff811115613ea057600080fd5b602083019150836001820283011115613eb857600080fd5b9250929050565b60008083601f8401121515613ed357600080fd5b8235905067ffffffffffffffff811115613eec57600080fd5b602083019150836001820283011115613f0457600080fd5b9250929050565b600082601f8301121515613f1e57600080fd5b8135613f31613f2c82614713565b6146be565b91508082526020830160208301858383011115613f4d57600080fd5b613f58838284614852565b50505092915050565b600082601f8301121515613f7457600080fd5b8135613f87613f828261473f565b6146be565b91508082526020830160208301858383011115613fa357600080fd5b613fae838284614852565b50505092915050565b6000613fc38235614848565b905092915050565b600060208284031215613fdd57600080fd5b6000613feb84828501613dad565b91505092915050565b6000806040838503121561400757600080fd5b600061401585828601613dad565b925050602061402685828601613dad565b9150509250929050565b60008060006060848603121561404557600080fd5b600061405386828701613dad565b935050602061406486828701613dad565b925050604061407586828701613fb7565b9150509250925092565b60008060008060006080868803121561409757600080fd5b60006140a588828901613dad565b95505060206140b688828901613dad565b94505060406140c788828901613fb7565b935050606086013567ffffffffffffffff8111156140e457600080fd5b6140f088828901613e73565b92509250509295509295909350565b6000806040838503121561411257600080fd5b600061412085828601613dad565b925050602061413185828601613e37565b9150509250929050565b6000806040838503121561414e57600080fd5b600061415c85828601613dad565b925050602061416d85828601613fb7565b9150509250929050565b60006020828403121561418957600080fd5b600082013567ffffffffffffffff8111156141a357600080fd5b6141af84828501613dc1565b91505092915050565b6000602082840312156141ca57600080fd5b60006141d884828501613e4b565b91505092915050565b6000602082840312156141f357600080fd5b600061420184828501613e5f565b91505092915050565b60006020828403121561421c57600080fd5b600082013567ffffffffffffffff81111561423657600080fd5b61424284828501613f61565b91505092915050565b60006020828403121561425d57600080fd5b600061426b84828501613fb7565b91505092915050565b60008060006040848603121561428957600080fd5b600061429786828701613fb7565b935050602084013567ffffffffffffffff8111156142b457600080fd5b6142c086828701613ebf565b92509250509250925092565b600080604083850312156142df57600080fd5b60006142ed85828601613fb7565b92505060206142fe85828601613fb7565b9150509250929050565b61431181614781565b82525050565b614320816147a1565b82525050565b61432f816147ad565b82525050565b60006143408261476b565b808452614354816020860160208601614861565b61435d81614894565b602085010191505092915050565b600061437682614776565b80845261438a816020860160208601614861565b61439381614894565b602085010191505092915050565b6000601082527f416c6c20746f6b656e204d696e746564000000000000000000000000000000006020830152604082019050919050565b6000601482527f546f6b656e20616c7265616479206d696e7465640000000000000000000000006020830152604082019050919050565b6000601382527f4f6e6c79206f776e65722063616e2063616c6c000000000000000000000000006020830152604082019050919050565b6000601c82527f517565727920666f72206e6f6e2d6578697374616e7420746f6b656e000000006020830152604082019050919050565b6000601782527f53656e646572206973206e6f7420746865204f776e65720000000000000000006020830152604082019050919050565b6000601082527f506179656d656e7420746f6f206c6f77000000000000000000000000000000006020830152604082019050919050565b6144f4816147d9565b82525050565b614503816147e3565b82525050565b600060208201905061451e6000830184614308565b92915050565b60006080820190506145396000830187614308565b6145466020830186614308565b61455360408301856144eb565b81810360608301526145658184614335565b905095945050505050565b60006020820190506145856000830184614317565b92915050565b60006020820190506145a06000830184614326565b92915050565b600060208201905081810360008301526145c0818461436b565b905092915050565b600060208201905081810360008301526145e1816143a1565b9050919050565b60006020820190508181036000830152614601816143d8565b9050919050565b600060208201905081810360008301526146218161440f565b9050919050565b6000602082019050818103600083015261464181614446565b9050919050565b600060208201905081810360008301526146618161447d565b9050919050565b60006020820190508181036000830152614681816144b4565b9050919050565b600060208201905061469d60008301846144eb565b92915050565b60006020820190506146b860008301846144fa565b92915050565b6000604051905081810181811067ffffffffffffffff821117156146e157600080fd5b8060405250919050565b600067ffffffffffffffff82111561470257600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561472a57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561475657600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffffff00000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b600060ff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b82818337600083830152505050565b60005b8381101561487f578082015181840152602081019050614864565b8381111561488e576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820c1de419b0ec1f795a30204b7b950ed8353260fcad163d8f84bfc31d987a74a2a6c6578706572696d656e74616cf50037",
  "devdoc": {
    "methods": {
      "approve(address,uint256)": {
        "details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.\r",
        "params": {
          "_approved": "Address to be approved for the given NFT ID.\r",
          "_tokenId": "ID of the token to be approved.\r"
        }
      },
      "balanceOf(address)": {
        "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are\r considered invalid, and this function throws for queries about the zero address.\r",
        "params": {
          "_owner": "Address for whom to query the balance.\r"
        },
        "return": "Balance of _owner.\r"
      },
      "getApproved(uint256)": {
        "details": "Get the approved address for a single NFT.\r",
        "params": {
          "_tokenId": "ID of the NFT to query the approval of.\r"
        },
        "return": "Address that _tokenId is approved for.\r"
      },
      "isApprovedForAll(address,address)": {
        "details": "Checks if `_operator` is an approved operator for `_owner`.\r",
        "params": {
          "_operator": "The address that acts on behalf of the owner.\r",
          "_owner": "The address that owns the NFTs.\r"
        },
        "return": "True if approved for all, false otherwise.\r"
      },
      "name()": {
        "details": "Returns a descriptive name for a collection of NFTokens.\r",
        "return": "Representing name.\r"
      },
      "ownerOf(uint256)": {
        "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered\r invalid, and queries about them do throw.\r",
        "params": {
          "_tokenId": "The identifier for an NFT.\r"
        },
        "return": "Address of _tokenId owner.\r"
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can\r be changed to payable.\r",
        "params": {
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Transfers the ownership of an NFT from one address to another address. This function can\r be changed to payable.\r",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`.\r",
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "saveTokenURI(uint256)": {
        "details": "Save the block.number inside an array.",
        "params": {
          "_tokenId": "Id for which we want uri."
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Enables or disables approval for a third party (\"operator\") to manage all of\r `msg.sender`'s assets. It also emits the ApprovalForAll event.\r",
        "params": {
          "_approved": "True if the operators is approved, false to revoke approval.\r",
          "_operator": "Address to add to the set of authorized operators.\r"
        }
      },
      "setTokenIdDefaultIndex(uint256,uint256)": {
        "details": "Set the default index for the tokenURI.",
        "params": {
          "_defaultIndex": "Index of block.number used to build the tokenURI to set as default.",
          "_tokenId": "Id for which we want uri."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Function to check which interfaces are suported by this contract.\r",
        "params": {
          "_interfaceID": "Id of the interface.\r"
        },
        "return": "True if _interfaceID is supported, false otherwise.\r"
      },
      "symbol()": {
        "details": "Returns an abbreviated name for NFTokens.\r",
        "return": "Representing symbol.\r"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "returns the n-th NFT ID from a list of owner's tokens.\r",
        "params": {
          "_index": "Index number representing n-th token in owner's list of tokens.\r",
          "_owner": "Token owner's address.\r"
        },
        "return": "Token id.\r"
      },
      "tokenURI(uint256)": {
        "details": "A distinct URI (RFC 3986) for a given NFT.",
        "params": {
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved\r address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero\r address. Throws if `_tokenId` is not a valid NFT. This function can be changed to payable.\r",
        "params": {
          "_from": "The current owner of the NFT.\r",
          "_to": "The new owner.\r",
          "_tokenId": "The NFT to transfer.\r"
        }
      },
      "viewCurrentTokenURI(uint256)": {
        "details": "View the current tokenURI for a given tokenId at the current block.",
        "params": {
          "_tokenId": "Id for which we want the current uri."
        },
        "return": "URI of _tokenId."
      },
      "viewSpecificTokenURI(uint256,uint256)": {
        "details": "View a specific, already saved tokenURI.",
        "params": {
          "_index": "Index for which we want to see the tokenURI.",
          "_tokenId": "Id for which we want uri."
        },
        "return": "URI of _tokenId."
      }
    }
  },
  "userdoc": {
    "methods": {
      "approve(address,uint256)": {
        "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is\r the current NFT owner, or an authorized operator of the current owner.\r"
      },
      "getApproved(uint256)": {
        "notice": "Throws if `_tokenId` is not a valid NFT.\r"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "This works identically to the other function with an extra data parameter, except this\r function just sets data to \"\"\r"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the\r approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is\r the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this\r function checks if `_to` is a smart contract (code size > 0). If so, it calls\r `onERC721Received` on `_to` and throws if the return value is not\r `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`.\r"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "This works even if sender doesn't own any tokens at the time.\r"
      },
      "totalSupply()": {
        "notice": "/ Enumerable\r"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else\r they maybe be permanently lost.\r"
      }
    }
  }
}